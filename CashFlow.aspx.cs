 using DocumentFormat.OpenXml.Bibliography;
using DocumentFormat.OpenXml.Office.CustomUI;
using DocumentFormat.OpenXml.VariantTypes;
using DocumentFormat.OpenXml.Wordprocessing;
using LanguageExt.Pipes;
using LanguageExt.Pretty;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Net.Mail;
using System.Reflection.Emit;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Label = System.Web.UI.WebControls.Label;

public partial class CashFlow : System.Web.UI.Page
{

    DAL dl = new DAL();
    SendMailSmS sms = new SendMailSmS();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            pnlAllData.Visible = true;
            pnlLoginData.Visible = false;
            pnllogindata2.Visible = false;
            pnlInterestBullet.Visible = false;
            pnlInterestStaggered.Visible = false;
            pnlInterestCumulative.Visible = false;
            Panel3.Visible = false;
            Panel4.Visible = false;
            Panel5.Visible = false;
            pnl1.Visible = true;
            pnl2.Visible = false;
            pnl3.Visible = false;
            pnl4.Visible = false;
            vinvesttype.Visible = false;
            vsubmit.Visible = false;
            pnlDealConfirmation.Visible = false;
            lnkprint.Visible = false;
            pnlViewInteresr.Visible = false;
            pnlViewDealCalculation.Visible = false;
            pnlViewInterestSheet.Visible = false;
            pnlInBullet.Visible = false;
            pnlStaggered.Visible = false;
            pnlcumu.Visible = false;
            hfDealConfirmationId.Value = string.Empty;
            lnktab1.Attributes["class"] = "tab-link active";
            lnktab2.Attributes["class"] = "tab-link";
            lnktab3.Attributes["class"] = "tab-link";
            lnktab4.Attributes["class"] = "tab-link";
            lblCDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-","/");
            BindInterestView();
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = false;
                pnlCashFlow.Visible = true;
                pnl.Visible = true;
                pnlViewSheet.Visible = false;
                pnlLoginToView.Visible = false;
                pnlCloseDeal.Visible = true;
               // pnlInvest.Visible = true;
               // pnlinvestlogin.Visible = false;
                BindRM();
                UserDetails();
                //Panel1.Visible = false;
                //Panel2.Visible = false;
            }
            else
            {
                pnlCashFlow.Visible = false;
                pnl.Visible = false;
                pnlViewSheet.Visible = false;
                pnlLoginToView.Visible = false;
                pnlCloseDeal.Visible = false;
                //pnlInvest.Visible = false;
               // pnlinvestlogin.Visible = true;
                //Panel1.Visible = false;
                //Panel2.Visible = false;
            }
            //pnlView.Visible = false;
            pnlDetailsCumulative.Visible = false;

            if (Request.QueryString["oId"] != null)
            {
                //string decryptedText = EncryptionHelper.Decrypt(Request.QueryString["oId"].ToString());
               

                getData(Request.QueryString["oId"].ToString());
                FindLastIPDate();
                BindCalcu(Request.QueryString["oId"].ToString());
                BindFlowChart(Request.QueryString["oId"].ToString());
                BindDataaa(Request.QueryString["oId"].ToString());
                BindDDataaa(Request.QueryString["oId"].ToString());
               // getYieldWithXIRR();
                BindOverViews(Request.QueryString["oId"].ToString());
                BindOverView(Request.QueryString["oId"].ToString());
                FrequencyTypeView();

            }
            votp.Visible = false;
            lnkSubmit.Visible = false;
            pnlResend.Visible = false;
            votp1.Visible = false;
            lnkSubmit2.Visible = false;
            pnlResend1.Visible = false;
        }


    }

    private void UserDetails()
    {
        DataTable dt = dl.getCustomer(GetUserLoggedIn(), true);
        if(dt.Rows.Count > 0)
        {
            hfCustomerName.Value = dt.Rows[0]["CFullName"].ToString();
            lblCustomer.Text = hfCustomerName.Value;
            lblCustomerName.Text = hfCustomerName.Value;
            lblCustomers.Text = hfCustomerName.Value;
        }
    }



    private void FrequencyTypeView()
    {
        if (hfMaturityType.Value == "Bullet")
        {
            pnlInterestBullet.Visible = true;
            pnlInterestStaggered.Visible = false;
            pnlInterestCumulative.Visible = false;
            Panel3.Visible = true;
            Panel4.Visible = false;
            Panel5.Visible = false;
        }
        if (hfMaturityType.Value == "Staggered")
        {
            pnlInterestBullet.Visible = false;
            pnlInterestStaggered.Visible = true;
            pnlInterestCumulative.Visible = false;
            Panel3.Visible = false;
            Panel4.Visible = true;
            Panel5.Visible = false;
        }
        if (hfMaturityType.Value == "Cumulative")
        {
            pnlInterestBullet.Visible = false;
            pnlInterestStaggered.Visible = false;
            pnlInterestCumulative.Visible = true;
            pnlDetailsCumulative.Visible = false;
            Panel3.Visible = false;
            Panel4.Visible = false;
            Panel5.Visible = true;
        }
    }
    private string GetUserLoggedIn()
    {

        HttpCookie cookieuser = Request.Cookies["DGBAM"];
        if (cookieuser == null)
        {
            return null;
        }
        else
        {
            return cookieuser.Value.ToString();
        }

    }


    private double CalculateXIRR(double[] cashFlows, DateTime[] dates, double guess = 0.1)
    {
        const double tol = 1e-6; // tolerance for accuracy
        double x0 = guess;
        double x1;

        int maxIterations = 1000; // maximum number of iterations
        int i = 0;

        if (cashFlows.Length != dates.Length)
            throw new ArgumentException("Cash flows and dates must have the same length.");

        do
        {
            double fValue = 0.0;
            double fDerivative = 0.0;

            for (int j = 0; j < cashFlows.Length; j++)
            {
                double d1 = (dates[j] - dates[0]).TotalDays / 365.0;
                double denominator = Math.Pow(1.0 + x0, d1);
                fValue += cashFlows[j] / denominator;
                fDerivative -= d1 * cashFlows[j] / (denominator * (1.0 + x0));
            }

            if (Math.Abs(fDerivative) < tol)
                throw new InvalidOperationException("Derivative is too small; try a different guess.");

            x1 = x0 - fValue / fDerivative;

            if (Math.Abs(x1 - x0) < tol)
                return x1;

            x0 = x1;
            i++;

        } while (i < maxIterations);

        throw new InvalidOperationException("XIRR calculation did not converge.");
    }

    private void BindDataValue()
    {

        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime IPDate = DateTime.ParseExact(lblLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattle = DateTime.Now;
        DateTime IPDat = DateTime.ParseExact(lblLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattles = DateTime.Now;
        if (hfPaymentType.Value == "Monthly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastMonthlyDate(Sattles, IPDat);
                    string Date = dt.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;

                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
                else
                {
                    DataTable dt = dl.get_MonthlyDate(Sattles, IPDat);
                    string Date = dt.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;

                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
            }
        }
        if (hfPaymentType.Value == "Yearly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_YearlyDate(Sattle, IPDate);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                    }


                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
                else
                {
                    DataTable dt = dl.get_YearlyDatesss(Sattle, IPDate);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                    }
                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }

            }
        }

        if (hfPaymentType.Value == "Quarterly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastQuarterlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
                else
                {
                    DataTable dt = dl.get_QuarterlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
            }
        }

        if (hfPaymentType.Value == "Half Yearly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {

                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastHalfYearlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
                else
                {
                    DataTable dt = dl.get_HalfYearlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
            }
        }
    }

    private void getYieldWithXIRR()
    {
     
        float rate = 0,couponrate=0;
        DateTime d1 = DateTime.Now;
        DateTime d2 = DateTime.ParseExact(hfLastIPDateXIRR.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        //DateTime d2 = Convert.ToDateTime(lblLastIP.Text);
        //DateTime d3 = Convert.ToDateTime(lblMaturity.Text);
        //DateTime d2 = DateTime.ParseExact(lblLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime d3 = DateTime.ParseExact(lblMaturity.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);

        TimeSpan t = d1 - d2;
        double NrOfDays = t.TotalDays;
        TimeSpan t1 = d3 - d2;

        couponrate = float.Parse(lblCouponRates.Text);
        if(lblPrice.Text == "0" || lblPrice.Text == "")
        {
            lblPrice.Text = "100";
            rate = float.Parse(lblPrice.Text);
        }
        else
        {
            rate = float.Parse(lblPrice.Text);
        }

        var dateSpan = DateTimeSpan.CompareDates(d3, d2);
        var TotalYear = dateSpan.Years;
        var TotalMonth = dateSpan.Months;
        var TotalDay = dateSpan.Days;
        float Year = float.Parse(TotalYear.ToString());
        float Month = float.Parse(TotalMonth.ToString());
        float Day = float.Parse(TotalDay.ToString());

        float tday = float.Parse(NrOfDays.ToString("0"));
        float interest = ((100 * tday * couponrate) / 36500);

        float fa = -(rate + interest);
        List<double> cashFlowss = new List<double>();

        List<DateTime> dateList = new List<DateTime>();
        if (hfPaymentType.Value == "Monthly")
        {
            var totalMonths = ((Year * 12) + Month);
            hfMonth.Value = totalMonths.ToString();

        }
        if (hfPaymentType.Value == "Yearly")
        {
            string TYear = Year.ToString();
            hfYearly.Value = TYear.ToString();
        }
        if (hfPaymentType.Value == "Quarterly")
        {
            var totalQuarter = (Year * 4);
            var totalmonth = (Month / 3);
            var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
            hfQuerterly.Value = totalQuarterly.ToString();
        }
        if (hfPaymentType.Value == "Half Yearly")
        {
            var totalHalfYearl = (Year * 2);
            var mon = (Month / 6);
            var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
            var month = (Month - (mon * 2));
            hfHalfYearly.Value = totalHalfYearly.ToString();
        }
        string dates = d1.ToString("dd/MM/yyyy").Replace("-", "/");
        string[] splitedDates = dates.Split('/');
        //Save this in MonthDay field
        string monthDays = string.Join("/", splitedDates[1]);
        //Save this in Year field
        string datedayss = splitedDates[0];
        string years = splitedDates[2];
        int ys = Convert.ToInt32(years.ToString());
        int ms = Convert.ToInt32(monthDays.ToString());
        int ds = Convert.ToInt32(datedayss.ToString());
        cashFlowss.Add(fa);
        dateList.Add(new DateTime(ys, ms, ds));
        DateTime ldate = d2;
        int UnitCount = 0;
        if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
        {
            if (hfPaymentType.Value == "Monthly")
            {
                UnitCount = Convert.ToInt32(hfMonth.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i);
                    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    // if (InsDate == d3)
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    cashFlowss.Add(100 + cop);

                    //    dateList.Add(new DateTime(y, m, d));

                    //}
                    //else
                    //{
                    if (d3 > InsDate)
                    {
                        if (i == 1)
                        {
                            //if (d3 > InsDate)
                            //{

                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                            TimeSpan tm = InsDate - d2;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            // }

                            //}
                        }
                        else
                        {
                            //if (d3 > InsDate)
                            //{

                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                            TimeSpan tm = InsDate - ldate;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            // }

                            // }
                        }
                        ldate = InsDate;
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                   // ldate = InsDate;
                }
                if (d3 > ldate || d3==ldate)
                {
                    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                    TimeSpan tm = d3 - ldate;
                    double cd = tm.TotalDays;
                    double c = 100 + (couponrate * (cd) / 365);
                    cashFlowss.Add(c);
                    dateList.Add(new DateTime(y, m, d));
                }

                //if(ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));

                //    float cop = 100 + (couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.13;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Yearly")
            {
                UnitCount = Convert.ToInt32(hfYearly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 12);
                    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    //if (InsDate == d3)
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    cashFlowss.Add(100 + cop);

                    //    dateList.Add(new DateTime(y, m, d));

                    //}
                    //else
                    //{
                    if (d3 > InsDate)
                    {
                        if (i == 1)
                        {

                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - d2;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));


                        }
                        else
                        {

                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - ldate;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));

                        }

                        ldate = InsDate;
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}

                }
                if (d3 > ldate || d3 == ldate)
                {
                    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    TimeSpan tm = d3 - ldate;
                    double cd = tm.TotalDays;
                    double c = 100 + (couponrate * (cd) / 365);
                    cashFlowss.Add(c);
                    dateList.Add(new DateTime(y, m, d));
                }

                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + couponrate;
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100);


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                UnitCount = Convert.ToInt32(hfQuerterly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 3);
                    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    //if (InsDate == d3)
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    cashFlowss.Add(100 + cop);

                    //    dateList.Add(new DateTime(y, m, d));

                    //}
                    //else
                    //{
                    if (d3 > InsDate)
                    {
                        if (i == 1)
                        {
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - d2;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - ldate;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        ldate = InsDate;
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}


                    //}
                }
                if (d3 > ldate || d3 == ldate)
                {
                    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    TimeSpan tm = d3 - ldate;
                    double cd = tm.TotalDays;
                    double c = 100 + (couponrate * (cd) / 365);
                    cashFlowss.Add(c);
                    dateList.Add(new DateTime(y, m, d));
                }
                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate/3);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.13;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 6);
                    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    //if (InsDate == d3)
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    cashFlowss.Add(100 + cop);

                    //    dateList.Add(new DateTime(y, m, d));

                    //}
                    //else
                    //{
                    if (d3 > InsDate)
                    {

                        if (i == 1)
                        {
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - d2;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            TimeSpan tm = InsDate - ldate;
                            double cd = tm.TotalDays;
                            double c = couponrate * (cd) / 365;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        ldate = InsDate;
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}


                    // }
                }
                if (d3 > ldate || d3==ldate)
                {
                    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    string[] splitedDate = date.Split('/');
                    //Save this in MonthDay field
                    string monthDay = string.Join("/", splitedDate[1]);
                    //Save this in Year field
                    string year = splitedDate[2];
                    string day = splitedDate[0];
                    int y = Convert.ToInt32(year.ToString());
                    int m = Convert.ToInt32(monthDay.ToString());
                    int d = Convert.ToInt32(day.ToString());
                    TimeSpan tm = d3 - ldate;
                    double cd = tm.TotalDays;
                    double c = 100 + (couponrate * (cd) / 365);
                    cashFlowss.Add(c);
                    dateList.Add(new DateTime(y, m, d));
                }
                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate/2);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100);


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }






            //for (int i = 1; i < UnitCount + 1; i++)
            //{
            //    DateTime InsDate = d2.AddMonths(i);
            //    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //    string[] splitedDate = date.Split('/');
            //    //Save this in MonthDay field
            //    string monthDay = string.Join("/",splitedDate[1]);
            //    //Save this in Year field
            //    string year = splitedDate[2];
            //    string day = splitedDate[0];
            //    int y = Convert.ToInt32(year.ToString());
            //    int m = Convert.ToInt32(monthDay.ToString());
            //    int d = Convert.ToInt32(day.ToString());
            //    if (InsDate == d3)
            //    {
            //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
            //        cashFlowss.Add(100 + cop);

            //        dateList.Add(new DateTime(y, m, d));

            //    }
            //    else
            //    {
            //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
            //        cashFlowss.Add(cop);
            //        dateList.Add(new DateTime(y, m, d));
            //    }
            //}


        }

        if(hfMaturityType.Value == "Staggered")
        {
            if (hfPaymentType.Value == "Monthly")
            {
                float ratevalue = 100, tpercent = 0;
                UnitCount = Convert.ToInt32(hfMonth.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i);
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(),InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Percentage != null || Percentage != "")
                        {
                            float percent = float.Parse(Percentage.ToString());


                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{

                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double cc = percent + (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double cc = percent + (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                            tpercent = tpercent + percent;
                            ratevalue = ratevalue - percent;
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{

                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double cc =  (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double cc = (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                        }
                    }
                    else
                    {
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        // if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double cc = ratevalue*couponrate * (cd) / 36500;
                                string ca = cc.ToString("0.00000000");
                                double c = Convert.ToDouble(ca);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                //}
                            }
                            else
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double cc = ratevalue * couponrate * (cd) / 36500;
                                string ca = cc.ToString("0.00000000");
                                double c = Convert.ToDouble(ca);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                // }
                            }
                        }
                        ldate = InsDate;
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    // ldate = InsDate;
                }
                if (d3 > ldate || d3 == ldate)
                {
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if(dt.Rows.Count > 0)
                    {
                        string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float perc = float.Parse(percent);
                        float tpc = 100 - tpercent;
                        tpercent = tpercent + perc;
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                     

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double cc = tpc + ratevalue * (couponrate * (cd) / 36500);
                        string ca = cc.ToString("0.00000000");
                        double c = Convert.ToDouble(ca);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                        ratevalue = ratevalue - tpc;
                    }
                    else
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double cc = ratevalue * (couponrate * (cd) / 36500);
                        string ca = cc.ToString("0.00000000");
                        double c = Convert.ToDouble(ca);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                }

                //if(ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));

                //    float cop = 100 + (couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.14;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Yearly")
            {
                float ratevalue = 100, tpercent = 0;
                UnitCount = Convert.ToInt32(hfYearly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 12);
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string Percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Percent != null || Percent != "")
                        {
                            float perct = float.Parse(Percent);

                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                                ratevalue = ratevalue - perct;
                                tpercent = tpercent + perct;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c =  (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                            }
                        }
                    }
                    else
                    {
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));


                            }
                            else
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));

                            }

                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}

                    }
                }
                if (d3 > ldate || d3 == ldate)
                {
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string per = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float pert = float.Parse(per);
                        float tp = 100 - tpercent;
                        tpercent = tpercent + pert;

                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = tp + (ratevalue*couponrate * (cd) / 36500);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                        ratevalue = ratevalue - tp;
                    }
                    else
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = (ratevalue*couponrate * (cd) / 36500);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                }


                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + couponrate;
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.14;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                float ratevalue = 100, tpercent = 0;
                UnitCount = Convert.ToInt32(hfQuerterly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 3);
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        if (perc != null || perc != "")
                        {
                            float pert = float.Parse(perc);
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double cc = pert + (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double cc = pert + (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                                ratevalue = ratevalue - pert;
                                tpercent = tpercent + pert;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double cc =  (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double cc = (ratevalue * couponrate * (cd) / 36500);
                                    string ca = cc.ToString("0.00000000");
                                    double c = Convert.ToDouble(ca);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;

                            }
                        }
                    }
                    else
                    {

                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double cc = ratevalue*couponrate * (cd) / 36500;
                                string ca = cc.ToString("0.00000000");
                                double c = Convert.ToDouble(ca);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double cc = ratevalue*couponrate * (cd) / 36500;
                                string ca = cc.ToString("0.00000000");
                                double c = Convert.ToDouble(ca);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                    }
                    //else
                    //{
                    //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                    //    TimeSpan tm = d3 - ldate;
                    //    double cd = tm.TotalDays;
                    //    double c = 100 + (couponrate * (cd) / 365);
                    //    cashFlowss.Add(c);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}


                    //}
                }
                if (d3 > ldate || d3 == ldate)
                {
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string pert = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float perc = float.Parse(pert);
                        float tp = 100 - tpercent;
                        tpercent = tpercent + perc;
                        
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double cc = tp + (ratevalue * couponrate * (cd) / 36500);
                        string ca = cc.ToString("0.00000000");
                        double c = Convert.ToDouble(ca);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    else
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double cc = ratevalue*couponrate * (cd) / 36500;
                        string ca = cc.ToString("0.00000000");
                        double c = Convert.ToDouble(ca);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                }
                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate/3);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.14;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                float ratevalue = 100, tpercent = 0;
                UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                for (int i = 1; i < UnitCount + 1; i++)
                {
                    DateTime InsDate = d2.AddMonths(i * 6);
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        if (percent != "")
                        {
                            float perct = float.Parse(percent);
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {

                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                                ratevalue = ratevalue - perct;
                                tpercent = tpercent + perct;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            if (d3>InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                            }
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        // }
                    }
                }
                if (d3 > ldate || d3 == ldate)
                {
                    DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                    if (dt.Rows.Count > 0)
                    {
                        string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        if (perc != "")
                        {
                            float per = float.Parse(perc);
                            float tp = 100 - tpercent;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            float tp = 100 - tpercent;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }
                    else
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = (ratevalue * couponrate * (cd) / 36500);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                }

                //if (ldate == d3)
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate/2);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                //else
                //{
                //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/", splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    TimeSpan tt = d3 - ldate;
                //    double noday = tt.TotalDays;
                //    float nday = float.Parse(noday.ToString("0"));
                //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                //    cashFlowss.Add(cop);
                //    dateList.Add(new DateTime(y, m, d));
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;

                xir = (xr * 100) - 0.14;


                string xrr = xir.ToString("0.000");
                hfYieldValue.Value = xrr.ToString();
            }

        }


        //  Response.Write(xir);
        // lblXIRR.Text = xir.ToString("0.00");

    }






    private void getData(string Data)
    {
        DataTable dt = new DAL().get_Products(Data, null, null, true);
        if(dt.Rows.Count > 0)
        {
            string Description = dt.Rows[0]["Description"].ToString();
            string IsInvest = dt.Rows[0]["IsInvestNow"].ToString();
            if (IsInvest.ToString() == "True")
            {
                if (GetUserLoggedIn() != null)
                {
                    pnlInvest.Visible = true;
                    pnlinvestlogin.Visible = false;
                }
                else
                {
                    pnlInvest.Visible = false;
                    pnlinvestlogin.Visible = true;
                }
            }
            if (IsInvest.ToString() == "False")
            {
                pnlInvest.Visible = false;
                pnlinvestlogin.Visible = false;
            }
            if (Description == "")
            {
                pnlDescription.Visible = false;
            }
            else
            {
                pnlDescription.Visible = true;
            }
        }

        hfProductsId.Value = Data.ToString();
        if (dt.Rows.Count > 0)
        {
            this.Page.Title = dt.Rows[0]["Security"].ToString();
            string PaymentType = dt.Rows[0]["PaymentTypeHead"].ToString();
            hfPaymentType.Value = PaymentType;
            string MaturityType = dt.Rows[0]["MaturityType"].ToString();
            hfMaturityType.Value = MaturityType;
            string ipdate = dt.Rows[0]["IPDate"].ToString();
            hfLastIPDateXIRR.Value = ipdate;
            lblISIN.Text = dt.Rows[0]["ISINNumber"].ToString();
            lblFaceValue.Text = dt.Rows[0]["FaceValueForBond"].ToString();
            string ytm = dt.Rows[0]["YTM"].ToString();
            hfYieldValue.Value = ytm;
            lblCouponRates.Text = dt.Rows[0]["CouponRate"].ToString();
            lblYTC.Text = dt.Rows[0]["YTCYieldSemi"].ToString();
            lblMaturity.Text = dt.Rows[0]["MaturityDate"].ToString();
            lblPut.Text = dt.Rows[0]["PutCallDate"].ToString();
            lblCall.Text = dt.Rows[0]["CallDate"].ToString();
            lblPaymentFrequesce.Text = dt.Rows[0]["PaymentTypeHead"].ToString();
            lblPrice.Text = dt.Rows[0]["Price"].ToString();

        }

        rptDataBind.DataSource = dt;
        rptDataBind.DataBind();

        //DataTable dtm = dl.get_FAQProducts(null, Data, null, null, null);
        //if (dtm.Rows.Count > 0)
        //{
        //    pnlView.Visible = true;
        //    rptFAQ.DataSource = dtm;
        //    rptFAQ.DataBind();
        //}
        DataTable dtc = dl.CheckLastDayOFMonth(Data);
        if (dt.Rows.Count > 0)
        {
            string EOM = dtc.Rows[0]["EOM"].ToString();
            hfEOM.Value = EOM;
        }
        //getYieldWithXIRR();
    }

    private void BindCalcu(string Data)
    {
        DataTable dt = new DAL().get_Products(Data, null, null, true);
        rptBondCalculator.DataSource = dt;
        rptBondCalculator.DataBind();
        rptDeal.DataSource = dt;
        rptDeal.DataBind();
    }

    private void BindOverViews(string Data)
    {
        DataTable dt = new DAL().get_Products(Data, null, null, true);
        if(dt.Rows.Count > 0)
        {
            rptViewproduct.DataSource = dt;
            rptViewproduct.DataBind();
            rptDescription.DataSource = dt;
            rptDescription.DataBind();
        }
    }
    private void BindInterestView()
    {
        DataTable dtc = dl.get_CashFlowView(null, GetUserLoggedIn(), null, null);
        if (dtc.Rows.Count > 0)
        {
            rptCashFlowDetails.DataSource = dtc;
            rptCashFlowDetails.DataBind();
        }
    }
    private void BindFlowChart(string Data)
    {
        DataTable dt = dl.get_CashFlow(null, GetUserLoggedIn(), Data, null);
        //if(dt.Rows.Count > 0)
        //{

        //    string widthdata = dt.Rows[0]["NumberBond"].ToString();
        //    float width = float.Parse(widthdata);
        //    hfWidthForm.Value = (width * 200).ToString();

        //}
        rptChartFace.DataSource = dt;
        rptChartFace.DataBind();
    }

    public bool IsValidMail(string emailaddress)
    {
        try
        {
            MailAddress m = new MailAddress(emailaddress);
            return true;
        }
        catch (FormatException)
        {
            return false;
        }
    }
    private void clear()
    {
        txtEmail.Text = string.Empty;
    }
    protected void btnSubscribe_Click(object sender, EventArgs e)
    {
        if (txtEmail.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Email Required', type: 'error',});", true);
            return;
        }
        if (!IsValidMail(txtEmail.Text))
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Email Must Be Enter', type: 'error',});", true);
            return;
        }
        if (ViewState["Id"] == null)
        {
            if (dl.AddSubscribe(null, txtEmail.Text))
            {
                clear();
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Subscribe Successfully', type: 'success',});", true);
                return;
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Already Subscribe', type: 'success',});", true);
                return;
            }
        }
    }

    protected void rptDataBind_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {

    }

    protected void rptViewproduct_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            Panel pnlPrice = (e.Item.FindControl("pnlPrice") as Panel);
            Label lblredemption = (e.Item.FindControl("lblredemption") as Label);
            Label lblm = (e.Item.FindControl("lblm") as Label);
            Panel pnlYield = (e.Item.FindControl("pnlYield") as Panel);
            Panel pnlPriceView = (e.Item.FindControl("pnlPriceView") as Panel);
            Panel pnlYieldView = (e.Item.FindControl("pnlYieldView") as Panel);
            Label lblCallDate = e.Item.FindControl("lblCallDate") as Label;
            Label lblPriceDate = e.Item.FindControl("lblPriceDate") as Label;
            Label lblYield = e.Item.FindControl("lblYield") as Label;
            HiddenField ProductsId = (e.Item.FindControl("hfProducts") as HiddenField);
            HiddenField hfIsInvest = e.Item.FindControl("hfIsInvest") as HiddenField;
            if(GetUserLoggedIn() !=null)
            {
                float yie = float.Parse(hfYieldValue.Value);
                lblYield.Text = yie.ToString("0.000");
            }
            Repeater rptCredit = e.Item.FindControl("rptCredit") as Repeater;
            rptCredit.DataSource = dl.get_CreditRatingTags(null, ProductsId.Value, null, null);
            rptCredit.DataBind();
            Repeater rptRMView = e.Item.FindControl("rptRMView") as Repeater;
            if(GetUserLoggedIn() !=null)
            {
                if(hfIsInvest.Value == "True")
                {
                    if(lblPriceDate.Text == "" || lblPriceDate.Text == "0")
                    {
                        lblPriceDate.Text = "100";
                    }
                    DataTable dtc = dl.get_RMAssign(null, null, GetUserLoggedIn(), null);
                    if (dtc.Rows.Count > 0)
                    {
                        rptRMView.DataSource = dtc;
                        rptRMView.DataBind();
                    }
                }
                if(hfIsInvest.Value == "False")
                {
                    if (lblPriceDate.Text == "" || lblPriceDate.Text == "0")
                    {
                        lblPriceDate.Text = "100";
                    }
                    pnlPrice.Visible = true;
                    
                }
            }

            string hfAgencies = (e.Item.FindControl("hfAgencies") as HiddenField).Value;
            Repeater rptAgencies = e.Item.FindControl("rptAgencies") as Repeater;
            rptAgencies.DataSource = dl.get_RatingAgenciesTags(null, hfAgencies, null, null);
            rptAgencies.DataBind();
            DataTable dt = dl.get_Products(hfProductsId.Value, null, null, null);
            lblredemption.Text = dt.Rows[0]["MaturityType"].ToString();
            if (lblredemption.Text == "Bullet")
            {
                lblm.Text = "Bullet Redemption";
            }
            if (lblredemption.Text == "Staggered")
            {
                lblm.Text = "Partial Redemption";
            }
            if (lblredemption.Text == "Cumulative")
            {
                lblm.Text = "Cumulative Redemption";

            }
            
            if (GetUserLoggedIn() != null)
            {
                pnlPrice.Visible = true;
                pnlYield.Visible = true;
                pnlPriceView.Visible = false;
                pnlYieldView.Visible = false;
            }
            else
            {
                pnlPrice.Visible = false;
                pnlYield.Visible = false;
                pnlPriceView.Visible = true;
                pnlYieldView.Visible = true;
            }
        }
    }

    protected void LinkButton1_Click(object sender, EventArgs e)
    {
        Response.Redirect("signin?url=" + Server.UrlEncode(Request.Url.AbsoluteUri.Replace(".aspx", "")));
    }

    protected void rptBondCalculator_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            getYieldWithXIRR();
            TextBox MaturityDate = (e.Item.FindControl("txtMaturityDate") as TextBox);
            TextBox txtYTM = (e.Item.FindControl("txtYTM") as TextBox);
            hfMaturityDate.Value = MaturityDate.Text;
            TextBox PriceRate = (e.Item.FindControl("txtRate") as TextBox);
            if(PriceRate.Text == "0" || PriceRate.Text == "")
            {
                PriceRate.Text = "100";
            }
            float ytm = float.Parse(hfYieldValue.Value);
            txtYTM.Text = ytm.ToString("0.000");
            
            //hfRatePrice.Value = PriceRate.Text;

        }
    }
    private void FindLastIPDate()
    {
        DataTable dt = dl.get_Products(Request.QueryString["oId"].ToString(), null, null, null);
        if (dt.Rows.Count > 0)
        {
            string IPDate = dt.Rows[0]["IPDate"].ToString();
            DateTime IPDat = DateTime.ParseExact(IPDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattles = DateTime.Now;
            if (hfEOM.Value == "1")
            {

                if (hfPaymentType.Value == "Monthly")
                {
                    DataTable dtc = dl.get_LastDateMonthly(Sattles);
                    string Date = dtc.Rows[0]["LastMonth"].ToString();
                    hfQuar.Value = Date;
                    //DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                  
                    lblLastIP.Text = Date;
                    hfLastIPDateXIRR.Value = Date;
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    DataTable dtc = dl.get_YearlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime IP = Datee.AddYears(-1);
                    hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");

                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DataTable dtm = dl.get_LastDateQuarterly(Datee);
                    string Datees = dtm.Rows[0]["LastQuarterly"].ToString();
                    hfSattlementDate.Value = Datees;
                    
                    lblLastIP.Text = Datees;
                    hfLastIPDateXIRR.Value = Datees;
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DataTable dtm = dl.get_LastDateHalfYearly(Datee);
                    string Datees = dtm.Rows[0]["get_LastDateHalfYearly"].ToString();

                
                    lblLastIP.Text = Datees;
                    hfLastIPDateXIRR.Value = Datees;
                }
            }
            else
            {

                if (hfPaymentType.Value == "Monthly")
                {
                    DataTable dtc = dl.get_MonthlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime IP = Datee.AddMonths(-1);

                    lblLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    DataTable dtc = dl.get_YearlyDatess(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime IP = Datee.AddYears(-1);

                    lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime IP = Datee.AddMonths(-3);

                    lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                    string Date = dtc.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;
                    DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime IP = Datee.AddMonths(-6);

                    lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                }
              
            }
        }
    }
    private void BindDataaa(string Data)
    
    {
        DataTable dt = dl.get_Products(Data, null, null, null);
        if (dt.Rows.Count > 0)
        {
            string IPDateaa = dt.Rows[0]["IPDate"].ToString();

            hfIPDateaaa.Value = IPDateaa.ToString();
            DateTime IPDat = DateTime.ParseExact(hfIPDateaaa.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string Frequency = dt.Rows[0]["PaymentTypeHead"].ToString();
            hfFrequencyType.Value = Frequency;
            DateTime Sattles = DateTime.Now;
            foreach (RepeaterItem rp in rptBondCalculator.Items)
            {
                if (hfFrequencyType.Value == "One Time Interest")
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    txtLastIP.Text = hfIPDateaaa.Value;                   
                }
                if (hfEOM.Value == "1")
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_LastDateMonthly(Sattles);
                        string Date = dtc.Rows[0]["LastMonth"].ToString();
                        hfQuar.Value = Date;
                        //DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        txtLastIP.Text = Date;
                        lblLastIP.Text = Date;
                        hfLastIPDateXIRR.Value = Date;
                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");

                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateQuarterly(Datee);
                        string Datees = dtm.Rows[0]["LastQuarterly"].ToString();
                        hfSattlementDate.Value = Datees;
                        txtLastIP.Text = Datees;
                        lblLastIP.Text = Datees;
                        hfLastIPDateXIRR.Value = Datees;
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateHalfYearly(Datee);
                        string Datees = dtm.Rows[0]["get_LastDateHalfYearly"].ToString();

                        txtLastIP.Text = Datees;
                        lblLastIP.Text = Datees;
                        hfLastIPDateXIRR.Value = Datees;
                    }
                }
                else
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_MonthlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDatess(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-3);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-6);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblIPDate.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                }
            }
        }
    }

    private void BindDDataaa(string Data)
    {
        DataTable dt = dl.get_Products(Data, null, null, null);
        if (dt.Rows.Count > 0)
        {
            string IPDateaa = dt.Rows[0]["IPDate"].ToString();

            hfIPDateaaa.Value = IPDateaa.ToString();
            DateTime IPDat = DateTime.ParseExact(hfIPDateaaa.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string Frequency = dt.Rows[0]["PaymentTypeHead"].ToString();
            hfFrequencyType.Value = Frequency;
            DateTime Sattles = DateTime.Now;
            foreach (RepeaterItem rp in rptDeal.Items)
            {
                if (hfFrequencyType.Value == "One Time Interest")
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    txtLastIP.Text = hfIPDateaaa.Value;
                }
                if (hfEOM.Value == "1")
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_LastDateMonthly(Sattles);
                        string Date = dtc.Rows[0]["LastMonth"].ToString();
                        hfQuar.Value = Date;
                        //DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        txtLastIP.Text = Date;
                        hfLastIPDateXIRR.Value = Date;
                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateQuarterly(Datee);
                        string Datees = dtm.Rows[0]["LastQuarterly"].ToString();
                        hfSattlementDate.Value = Datees;
                        txtLastIP.Text = Datees;
                        hfLastIPDateXIRR.Value = Datees;
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateHalfYearly(Datee);
                        string Datees = dtm.Rows[0]["get_LastDateHalfYearly"].ToString();

                        txtLastIP.Text = Datees;
                        hfLastIPDateXIRR.Value = Datees;
                    }
                }
                else
                {
                    TextBox txtLastIP = (TextBox)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_MonthlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDatess(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-3);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-6);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                        hfLastIPDateXIRR.Value = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                }
            }
        }
    }
    private void BindOverView(string Data)
    {
        DataTable dt = dl.get_Products(Data, null, null, null);
        if (dt.Rows.Count > 0)
        {
            string IPDateaa = dt.Rows[0]["IPDate"].ToString();

            hfIPDateaaa.Value = IPDateaa.ToString();
            DateTime IPDat = DateTime.ParseExact(hfIPDateaaa.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            string Frequency = dt.Rows[0]["PaymentTypeHead"].ToString();
            hfFrequencyType.Value = Frequency;
            DateTime Sattles = DateTime.Now;
            foreach (RepeaterItem rp in rptViewproduct.Items)
            {
                if (hfFrequencyType.Value == "One Time Interest")
                {
                    Label txtLastIP = (Label)rp.FindControl("txtLastIP");
                    txtLastIP.Text = hfIPDateaaa.Value;
                }
                if (hfEOM.Value == "1")
                {
                    Label txtLastIP = (Label)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_LastDateMonthly(Sattles);
                        string Date = dtc.Rows[0]["LastMonth"].ToString();
                        hfQuar.Value = Date;
                        //DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        txtLastIP.Text = Date;

                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateQuarterly(Datee);
                        string Datees = dtm.Rows[0]["LastQuarterly"].ToString();
                        hfSattlementDate.Value = Datees;
                        txtLastIP.Text = Datees;
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DataTable dtm = dl.get_LastDateHalfYearly(Datee);
                        string Datees = dtm.Rows[0]["get_LastDateHalfYearly"].ToString();

                        txtLastIP.Text = Datees;
                    }
                }
                else
                {
                    Label txtLastIP = (Label)rp.FindControl("txtLastIP");
                    if (hfFrequencyType.Value == "Monthly")
                    {
                        DataTable dtc = dl.get_MonthlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");

                    }
                    if (hfFrequencyType.Value == "Yearly")
                    {
                        DataTable dtc = dl.get_YearlyDatess(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddYears(-1);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Quarterly")
                    {
                        DataTable dtc = dl.get_QuarterlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-3);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                    if (hfFrequencyType.Value == "Half Yearly")
                    {
                        DataTable dtc = dl.get_HalfYearlyDate(Sattles, IPDat);
                        string Date = dtc.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                        DateTime Datee = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime IP = Datee.AddMonths(-6);
                        txtLastIP.Text = IP.ToString("dd/MM/yyyy").Replace("-", "/");
                    }
                }
            }
        }
    }

    protected void txtFaceValueDeal_TextChanged(object sender, EventArgs e)
    {
        PaymentType();

        //   BindData();
        if (hfMaturityType.Value == "Bullet")
        {
            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantity");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            lblYield.Text = hfYieldValue.Value;
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            lblPrice.Text = Rate.ToString();
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
        }

        if (hfMaturityType.Value == "Cumulative")
        {
            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantity");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            float total = float.Parse(txtConsiderationStamp.Text);
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            float TotalGrossAmount = FaceValue + total;
            hfTotalGrossAmount.Value = TotalGrossAmount.ToString();
        }

        if (hfMaturityType.Value == "Staggered")
        {
            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantity");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            lblYield.Text = hfYieldValue.Value;
            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            float Deal = float.Parse(hfFacrValueForDeal.Value);
            float coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = coupon.ToString();
            DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            if (hfPaymentType.Value == "Monthly")
            {
                if (IPDate < Sattle)
                {
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                    TimeSpan FirstDay = (InstallDate - Salltle);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                        float percent = float.Parse(Percentage.ToString());

                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        float Principal = (FaceValue * percent / 100);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        float face = (Deal - (FaceValue * percent / 100));
                        hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        float per = percent;
                        hfPercentFirst.Value = per.ToString();
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        float interest = 0;
                        float Pers = 0;
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                //float fas = float.Parse(hfFaceee.Value);
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {
                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = ((FaceValue * perce / 100));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    lastDate = InsDate;
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    float total = (interest + ((face * coupon * days) / 36500));
                                    face = Faces;
                                    interest = total;
                                    hfTotalInt.Value = interest.ToString();
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {

                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float monthlyinterest = (((face * coupon * days) / 36500));
                                hfMonthlyInterest.Value = monthlyinterest.ToString();
                                lastDate = InsDate;
                                float total = (interest + (face * coupon * days) / 36500);
                                interest = total;
                                hfTotalInt.Value = interest.ToString();

                            }

                        }

                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float intLast = float.Parse(hfTotalInt.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);

                        if (dtn.Rows.Count > 0)
                        {

                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotapercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotapercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = (FaceValue * Percs / 100);
                                hfLastMonthly.Value = LastMonth.ToString();
                                float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                                hfTotalFullInt.Value = LastInterest.ToString();
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastMonthInt = float.Parse(hfRemainingDay.Value);
                            float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                            hfLastMonthly.Value = LastMonth.ToString();
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        float interest = 0;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    lastDate = InsDate;
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    float total = (interest + ((Deal * coupon * days) / 36500));
                                    Deal = Faces;
                                    interest = total;
                                    hfTotalInt.Value = interest.ToString();
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {

                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float monthlyinterest = (((Deal * coupon * days) / 36500));
                                hfMonthlyInterest.Value = monthlyinterest.ToString();
                                lastDate = InsDate;
                                float total = (interest + (Deal * coupon * days) / 36500);
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                            }

                        }

                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float intLast = float.Parse(hfTotalInt.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotapercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotapercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = (FaceValue * Percs / 100);
                                hfLastMonthly.Value = LastMonth.ToString();
                                float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                                hfTotalFullInt.Value = LastInterest.ToString();
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastMonthInt = float.Parse(hfRemainingDay.Value);
                            float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                            hfLastMonthly.Value = LastMonth.ToString();
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                    float Accured = float.Parse(txtAccured.Text);
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
            }

            if (hfPaymentType.Value == "Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dt.Rows.Count > 0)
                {
                    string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                    float Percent = float.Parse(Percentage);
                    float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                    float Principal = (FaceValue * Percent / 100);
                    hfFirstYearly.Value = FirstYear.ToString();
                    DateTime lastDate = InstallDate;
                    float face = (FaceValue - (FaceValue * Percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    float per = Percent;
                    float Pers = 0;
                    float interest = 0;
                    int UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {

                        DateTime InsDate = InstallDate.AddMonths(i * 12);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {

                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                float principal = (FaceValue * perce / 100);
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                interest = total;
                                face = Faces;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {

                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((face * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }

                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float facelast = float.Parse(hfFaces.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    if (dtn.Rows.Count > 0)
                    {

                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();

                    }

                }
                else
                {

                    float FirstYear = ((Deal * coupon * fday) / 36500);
                    hfFirstYearly.Value = FirstYear.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    DateTime lastDate = InstallDate;
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 12);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();

                        }


                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float facelast = float.Parse(hfFaces.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }

                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();

                    }

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            }

            if (hfPaymentType.Value == "Quarterly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float Principal = (FaceValue * percent / 100);
                    float face = (Deal - (FaceValue * percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float interest = 0;
                    float per = percent;
                    float Pers = 0;
                    DateTime lastDate = InstallDate;
                    int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 3);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                face = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((face * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                else
                {
                    float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    DateTime lastDate = InstallDate;
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 3);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }

                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                float Accured = float.Parse(txtAccured.Text);
                hfTotalAssuredInterest.Value = txtAccured.Text;
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                float GrossCo = float.Parse(txtGrossConder.Text);
                hfGrossConsideration.Value = txtGrossConder.Text;
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            }

            if (hfPaymentType.Value == "Half Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    float Principal = (FaceValue * percent / 100);
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float face = (Deal - (FaceValue * percent / 100));
                    float per = percent;
                    float Pers = 0;
                    float interest = 0;
                    int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 6);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                face = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }

                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((face * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                else
                {
                    float FirstHalfY = ((Deal * coupon * fday) / 36500);
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 6);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                float principal = (FaceValue * perce / 100);
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                if (txtAccured.Text == null || txtAccured.Text == "")
                {

                }
                else
                {
                    float Accured = float.Parse(txtAccured.Text);

                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    float stamp = float.Parse(txtStampDuty.Text);
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
            }

        }
        if (GetUserLoggedIn() != null)
        {
            pnlViewSheet.Visible = true;
            pnlLoginToView.Visible = false;
        }
        else
        {
            pnlViewSheet.Visible = false;
            pnlLoginToView.Visible = true;
        }
    }

    private void PaymentType()
    {
        foreach (RepeaterItem item in rptBondCalculator.Items)
        {
            TextBox txtNumber = (TextBox)item.FindControl("txtNumberDays");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            hfPaymentType.Value = ddlPaymentType.Text;
            if (ddlPaymentType.Text == "One Time Interest")
            {
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Monthly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                txtNumber.Text = hfDayValue.Value;

                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();
                hfRemainingDay.Value = Day.ToString();
            }
            if (ddlPaymentType.Text == "Yearly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalYear = Year;
                hfYearly.Value = totalYear.ToString();
                var totalMonths = Month;
                var TotalDay = Day;
                hfMonth.Value = totalMonths.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Quarterly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                var month = (Month - (totalmonth * 3));
                var TotalDay = Day;


                hfQuerterly.Value = totalQuarterly.ToString();
                hfMonth.Value = month.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Half Yearly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                var TotalDay = Day;
                hfHalfYearly.Value = totalHalfYearly.ToString();
                hfMonth.Value = month.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }

        }
    }

    private void PaymentTypes()
    {
        foreach (RepeaterItem item in rptDeal.Items)
        {
            TextBox txtNumber = (TextBox)item.FindControl("txtNumberDays");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            hfPaymentType.Value = ddlPaymentType.Text;
            if (ddlPaymentType.Text == "One Time Interest")
            {
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Monthly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                txtNumber.Text = hfDayValue.Value;

                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();
                hfRemainingDay.Value = Day.ToString();
            }
            if (ddlPaymentType.Text == "Yearly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalYear = Year;
                hfYearly.Value = totalYear.ToString();
                var totalMonths = Month;
                var TotalDay = Day;
                hfMonth.Value = totalMonths.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Quarterly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                var month = (Month - (totalmonth * 3));
                var TotalDay = Day;


                hfQuerterly.Value = totalQuarterly.ToString();
                hfMonth.Value = month.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }
            if (ddlPaymentType.Text == "Half Yearly")
            {
                float Year = float.Parse(hfTotalYear.Value);
                float Month = float.Parse(hfTotalMonth.Value);
                float Day = float.Parse(hfTotalDay.Value);
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                var TotalDay = Day;
                hfHalfYearly.Value = totalHalfYearly.ToString();
                hfMonth.Value = month.ToString();
                hfRemainingDay.Value = TotalDay.ToString();
                txtNumber.Text = hfDayValue.Value;
            }

        }
    }
    private void getYieldWithXIRRForInvestment()
    {
        if (hfSattlementDateforbond.Value == "")
        {
            float rate = 0, couponrate = 0;

            DateTime d1 = DateTime.Now;
            DateTime d2 = DateTime.ParseExact(hfLastIPDateXIRR.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime d3 = DateTime.ParseExact(lblMaturity.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            
            //DateTime d3 = Convert.ToDateTime(lblMaturity.Text);

            TimeSpan t = d1 - d2;
            double NrOfDays = t.TotalDays;
            TimeSpan t1 = d3 - d2;

            couponrate = float.Parse(lblCouponRates.Text);
            if (lblPrice.Text == "0" || lblPrice.Text == "")
            {
                lblPrice.Text = "100";
                rate = float.Parse(lblPrice.Text);
            }
            else
            {
                rate = float.Parse(lblPrice.Text);
            }

            var dateSpan = DateTimeSpan.CompareDates(d3, d2);
            var TotalYear = dateSpan.Years;
            var TotalMonth = dateSpan.Months;
            var TotalDay = dateSpan.Days;
            float Year = float.Parse(TotalYear.ToString());
            float Month = float.Parse(TotalMonth.ToString());
            float Day = float.Parse(TotalDay.ToString());

            float tday = float.Parse(NrOfDays.ToString("0"));
            float interest = ((100 * tday * couponrate) / 36500);

            float fa = -(rate + interest);
            List<double> cashFlowss = new List<double>();

            List<DateTime> dateList = new List<DateTime>();
            if (hfPaymentType.Value == "Monthly")
            {
                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();

            }
            if (hfPaymentType.Value == "Yearly")
            {
                string TYear = Year.ToString();
                hfYearly.Value = TYear.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                hfQuerterly.Value = totalQuarterly.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                hfHalfYearly.Value = totalHalfYearly.ToString();
            }
            string dates = d1.ToString("dd/MM/yyyy").Replace("-", "/");
            string[] splitedDates = dates.Split('/');
            //Save this in MonthDay field
            string monthDays = string.Join("/", splitedDates[1]);
            //Save this in Year field
            string datedayss = splitedDates[0];
            string years = splitedDates[2];
            int ys = Convert.ToInt32(years.ToString());
            int ms = Convert.ToInt32(monthDays.ToString());
            int ds = Convert.ToInt32(datedayss.ToString());
            cashFlowss.Add(fa);
            dateList.Add(new DateTime(ys, ms, ds));
            DateTime ldate = d2;
            int UnitCount = 0;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        // if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                //}
                            }
                            else
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                // }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100) - 0.13;


                    string xrr = xir.ToString("0.000");
                    hfYieldValue.Value = xrr.ToString();
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));


                            }
                            else
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));

                            }

                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}

                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100);

                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100) - 0.13;

                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {

                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        // }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100);

                    hfYieldValue.Value = xir.ToString("0.000");
                }






                //for (int i = 1; i < UnitCount + 1; i++)
                //{
                //    DateTime InsDate = d2.AddMonths(i);
                //    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/",splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    if (InsDate == d3)
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(100 + cop);

                //        dateList.Add(new DateTime(y, m, d));

                //    }
                //    else
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(cop);
                //        dateList.Add(new DateTime(y, m, d));
                //    }
                //}
                //double[] cashflows = cashFlowss.ToArray();
                //DateTime[] datess = dateList.ToArray();

                //// Calculate XIRR
                //double xirr = CalculateXIRR(cashflows, datess);
                //double xr = xirr;
                //double xir;
               
                //     xir = (xr * 100) - 0.13;
                
                //hfYieldValue.Value = xir.ToString("0.000");
            }

            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percentage != null || Percentage != "")
                            {
                                float percent = float.Parse(Percentage.ToString());


                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                                tpercent = tpercent + percent;
                                ratevalue = ratevalue - percent;
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(percent);
                            float tpc = 100 - tpercent;
                            tpercent = tpercent + perc;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tpc + ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tpc;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }

                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percent != null || Percent != "")
                            {
                                float perct = float.Parse(Percent);

                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                }
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}

                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string per = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float pert = float.Parse(per);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + pert;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tp;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }


                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != null || perc != "")
                            {
                                float pert = float.Parse(perc);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - pert;
                                    tpercent = tpercent + pert;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;

                                }
                            }
                        }
                        else
                        {

                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                            }
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string pert = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(pert);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + perc;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * couponrate * (cd) / 36500;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (percent != "")
                            {
                                float perct = float.Parse(percent);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {

                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                }
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}


                            // }
                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != "")
                            {
                                float per = float.Parse(perc);
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }

                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = float.Parse(xirr.ToString("0.000000"));
                double xir;
               
                     xir = (xr * 100) - 0.14;
                

                hfYieldValue.Value = xir.ToString("0.000");
            }
            //  Response.Write(xir);
            // lblXIRR.Text = xir.ToString("0.00");
        }
        else
        {

            
            float rate = 0, couponrate = 0;
            //DateTime d1 = Convert.ToDateTime(hfSattlementDateforbond.Value);
             DateTime d1 = DateTime.ParseExact(hfSattlementDateforbond.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture); ;
            DateTime d2 = DateTime.ParseExact(hfLastIPDateXIRR.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime d3 = DateTime.ParseExact(lblMaturity.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);

            //DateTime d3 = Convert.ToDateTime(lblMaturity.Text);

            TimeSpan t = d1 - d2;
            double NrOfDays = t.TotalDays;
            TimeSpan t1 = d3 - d2;

            couponrate = float.Parse(lblCouponRates.Text);
            if (lblPrice.Text == "0" || lblPrice.Text == "")
            {
                lblPrice.Text = "100";
                rate = float.Parse(lblPrice.Text);
            }
            else
            {
                rate = float.Parse(lblPrice.Text);
            }

            var dateSpan = DateTimeSpan.CompareDates(d3, d2);
            var TotalYear = dateSpan.Years;
            var TotalMonth = dateSpan.Months;
            var TotalDay = dateSpan.Days;
            float Year = float.Parse(TotalYear.ToString());
            float Month = float.Parse(TotalMonth.ToString());
            float Day = float.Parse(TotalDay.ToString());

            float tday = float.Parse(NrOfDays.ToString("0"));
            float interest = ((100 * tday * couponrate) / 36500);

            float fa = -(rate + interest);
            List<double> cashFlowss = new List<double>();

            List<DateTime> dateList = new List<DateTime>();
            if (hfPaymentType.Value == "Monthly")
            {
                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();

            }
            if (hfPaymentType.Value == "Yearly")
            {
                string TYear = Year.ToString();
                hfYearly.Value = TYear.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                hfQuerterly.Value = totalQuarterly.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                hfHalfYearly.Value = totalHalfYearly.ToString();
            }
            string dates = d1.ToString("dd/MM/yyyy").Replace("-", "/");
            string[] splitedDates = dates.Split('/');
            //Save this in MonthDay field
            string monthDays = string.Join("/", splitedDates[1]);
            //Save this in Year field
            string datedayss = splitedDates[0];
            string years = splitedDates[2];
            int ys = Convert.ToInt32(years.ToString());
            int ms = Convert.ToInt32(monthDays.ToString());
            int ds = Convert.ToInt32(datedayss.ToString());
            cashFlowss.Add(fa);
            dateList.Add(new DateTime(ys, ms, ds));
            DateTime ldate = d2;
            int UnitCount = 0;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        // if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                //}
                            }
                            else
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                // }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    float xr = float.Parse(xirr.ToString("0.000000"));
                    double xir;

                    xir = (xr * 100) - 0.13;


                    hfYieldValue.Value = xir.ToString("0.000");
                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));


                            }
                            else
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));

                            }

                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}

                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    float xr = float.Parse(xirr.ToString("0.000000"));
                    double xir;

                    xir = (xr * 100);


                    hfYieldValue.Value = xir.ToString("0.000");
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    float xr = float.Parse(xirr.ToString("0.000000"));
                    double xir;

                    xir = (xr * 100) - 0.13;


                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {

                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        // }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    float xr = float.Parse(xirr.ToString("0.000000"));
                    double xir;

                    xir = (xr * 100);


                    hfYieldValue.Value = xir.ToString("0.000");
                }






                //for (int i = 1; i < UnitCount + 1; i++)
                //{
                //    DateTime InsDate = d2.AddMonths(i);
                //    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/",splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    if (InsDate == d3)
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(100 + cop);

                //        dateList.Add(new DateTime(y, m, d));

                //    }
                //    else
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(cop);
                //        dateList.Add(new DateTime(y, m, d));
                //    }
                //}

            }
            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percentage != null || Percentage != "")
                            {
                                float percent = float.Parse(Percentage.ToString());


                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                                tpercent = tpercent + percent;
                                ratevalue = ratevalue - percent;
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(percent);
                            float tpc = 100 - tpercent;
                            tpercent = tpercent + perc;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tpc + ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tpc;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }

                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percent != null || Percent != "")
                            {
                                float perct = float.Parse(Percent);

                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                }
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}

                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string per = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float pert = float.Parse(per);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + pert;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tp;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }


                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != null || perc != "")
                            {
                                float pert = float.Parse(perc);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - pert;
                                    tpercent = tpercent + pert;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;

                                }
                            }
                        }
                        else
                        {

                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                            }
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string pert = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(pert);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + perc;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * couponrate * (cd) / 36500;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (percent != "")
                            {
                                float perct = float.Parse(percent);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {

                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                }
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}


                            // }
                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != "")
                            {
                                float per = float.Parse(perc);
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }

                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;
              
                    xir = (xr * 100) - 0.14;
                
                hfYieldValue.Value = xir.ToString("0.000");
            }
            //  Response.Write(xir);
            // lblXIRR.Text = xir.ToString("0.00");
        }

    }

    private void getYieldWithXIRRForDeal()
    {
        if (hfSattlementDateforbond.Value == "")
        {
            float rate = 0, couponrate = 0;

            DateTime d1 = DateTime.Now;
            DateTime d2 = DateTime.ParseExact(hfLastIPDateXIRR.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime d3 = DateTime.ParseExact(lblMaturity.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);

           // DateTime d3 = Convert.ToDateTime(lblMaturity.Text);

            TimeSpan t = d1 - d2;
            double NrOfDays = t.TotalDays;
            TimeSpan t1 = d3 - d2;

            couponrate = float.Parse(lblCouponRates.Text);
            if (lblPrice.Text == "0" || lblPrice.Text == "")
            {
                lblPrice.Text = "100";
                rate = float.Parse(lblPrice.Text);
            }
            else
            {
                rate = float.Parse(lblPrice.Text);
            }

            var dateSpan = DateTimeSpan.CompareDates(d3, d2);
            var TotalYear = dateSpan.Years;
            var TotalMonth = dateSpan.Months;
            var TotalDay = dateSpan.Days;
            float Year = float.Parse(TotalYear.ToString());
            float Month = float.Parse(TotalMonth.ToString());
            float Day = float.Parse(TotalDay.ToString());

            float tday = float.Parse(NrOfDays.ToString("0"));
            float interest = ((100 * tday * couponrate) / 36500);

            float fa = -(rate + interest);
            List<double> cashFlowss = new List<double>();

            List<DateTime> dateList = new List<DateTime>();
            if (hfPaymentType.Value == "Monthly")
            {
                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();

            }
            if (hfPaymentType.Value == "Yearly")
            {
                string TYear = Year.ToString();
                hfYearly.Value = TYear.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                hfQuerterly.Value = totalQuarterly.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                hfHalfYearly.Value = totalHalfYearly.ToString();
            }
            string dates = d1.ToString("dd/MM/yyyy").Replace("-", "/");
            string[] splitedDates = dates.Split('/');
            //Save this in MonthDay field
            string monthDays = string.Join("/", splitedDates[1]);
            //Save this in Year field
            string datedayss = splitedDates[0];
            string years = splitedDates[2];
            int ys = Convert.ToInt32(years.ToString());
            int ms = Convert.ToInt32(monthDays.ToString());
            int ds = Convert.ToInt32(datedayss.ToString());
            cashFlowss.Add(fa);
            dateList.Add(new DateTime(ys, ms, ds));
            DateTime ldate = d2;
            int UnitCount = 0;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        // if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                //}
                            }
                            else
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                // }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100) - 0.13;


                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));


                            }
                            else
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));

                            }

                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}

                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100);


                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100) - 0.13;


                    hfYieldValue.Value = xir.ToString("0.000");
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {

                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        // }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    double[] cashflows = cashFlowss.ToArray();
                    DateTime[] datess = dateList.ToArray();

                    // Calculate XIRR
                    double xirr = CalculateXIRR(cashflows, datess);
                    double xr = xirr;
                    double xir;

                    xir = (xr * 100);


                    hfYieldValue.Value = xir.ToString("0.000");
                }






                //for (int i = 1; i < UnitCount + 1; i++)
                //{
                //    DateTime InsDate = d2.AddMonths(i);
                //    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/",splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    if (InsDate == d3)
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(100 + cop);

                //        dateList.Add(new DateTime(y, m, d));

                //    }
                //    else
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(cop);
                //        dateList.Add(new DateTime(y, m, d));
                //    }
                //}

            }
            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percentage != null || Percentage != "")
                            {
                                float percent = float.Parse(Percentage.ToString());


                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                                tpercent = tpercent + percent;
                                ratevalue = ratevalue - percent;
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(percent);
                            float tpc = 100 - tpercent;
                            tpercent = tpercent + perc;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tpc + ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tpc;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }

                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percent != null || Percent != "")
                            {
                                float perct = float.Parse(Percent);

                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                }
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}

                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string per = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float pert = float.Parse(per);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + pert;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tp;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }


                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != null || perc != "")
                            {
                                float pert = float.Parse(perc);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - pert;
                                    tpercent = tpercent + pert;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;

                                }
                            }
                        }
                        else
                        {

                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                            }
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string pert = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(pert);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + perc;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * couponrate * (cd) / 36500;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (percent != "")
                            {
                                float perct = float.Parse(percent);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {

                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                }
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}


                            // }
                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != "")
                            {
                                float per = float.Parse(perc);
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;
             
                    xir = (xr * 100) - 0.14;
                
                hfYieldValue.Value = xir.ToString("0.000");
            }
            //  Response.Write(xir);
            // lblXIRR.Text = xir.ToString("0.00");
        }
        else
        {


            float rate = 0, couponrate = 0;
            //DateTime d1 = Convert.ToDateTime(hfSattlementDateforbond.Value);
            DateTime d1 = DateTime.ParseExact(hfSattlementDateforbond.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture); 
            DateTime d2 = DateTime.ParseExact(hfLastIPDateXIRR.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime d3 = DateTime.ParseExact(lblMaturity.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);

           // DateTime d3 = Convert.ToDateTime(lblMaturity.Text);

            TimeSpan t = d1 - d2;
            double NrOfDays = t.TotalDays;
            TimeSpan t1 = d3 - d2;

            couponrate = float.Parse(lblCouponRates.Text);
            if (lblPrice.Text == "0" || lblPrice.Text == "")
            {
                lblPrice.Text = "100";
                rate = float.Parse(lblPrice.Text);
            }
            else
            {
                rate = float.Parse(lblPrice.Text);
            }

            var dateSpan = DateTimeSpan.CompareDates(d3, d2);
            var TotalYear = dateSpan.Years;
            var TotalMonth = dateSpan.Months;
            var TotalDay = dateSpan.Days;
            float Year = float.Parse(TotalYear.ToString());
            float Month = float.Parse(TotalMonth.ToString());
            float Day = float.Parse(TotalDay.ToString());

            float tday = float.Parse(NrOfDays.ToString("0"));
            float interest = ((100 * tday * couponrate) / 36500);

            float fa = -(rate + interest);
            List<double> cashFlowss = new List<double>();

            List<DateTime> dateList = new List<DateTime>();
            if (hfPaymentType.Value == "Monthly")
            {
                var totalMonths = ((Year * 12) + Month);
                hfMonth.Value = totalMonths.ToString();

            }
            if (hfPaymentType.Value == "Yearly")
            {
                string TYear = Year.ToString();
                hfYearly.Value = TYear.ToString();
            }
            if (hfPaymentType.Value == "Quarterly")
            {
                var totalQuarter = (Year * 4);
                var totalmonth = (Month / 3);
                var totalQuarterly = Math.Truncate(totalQuarter + totalmonth);
                hfQuerterly.Value = totalQuarterly.ToString();
            }
            if (hfPaymentType.Value == "Half Yearly")
            {
                var totalHalfYearl = (Year * 2);
                var mon = (Month / 6);
                var totalHalfYearly = Math.Truncate(totalHalfYearl + mon);
                var month = (Month - (mon * 2));
                hfHalfYearly.Value = totalHalfYearly.ToString();
            }
            string dates = d1.ToString("dd/MM/yyyy").Replace("-", "/");
            string[] splitedDates = dates.Split('/');
            //Save this in MonthDay field
            string monthDays = string.Join("/", splitedDates[1]);
            //Save this in Year field
            string datedayss = splitedDates[0];
            string years = splitedDates[2];
            int ys = Convert.ToInt32(years.ToString());
            int ms = Convert.ToInt32(monthDays.ToString());
            int ds = Convert.ToInt32(datedayss.ToString());
            cashFlowss.Add(fa);
            dateList.Add(new DateTime(ys, ms, ds));
            DateTime ldate = d2;
            int UnitCount = 0;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        // if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                //}
                            }
                            else
                            {
                                //if (d3 > InsDate)
                                //{

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                                // }

                                // }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));


                            }
                            else
                            {

                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));

                            }

                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}

                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {
                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        //if (InsDate == d3)
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    cashFlowss.Add(100 + cop);

                        //    dateList.Add(new DateTime(y, m, d));

                        //}
                        //else
                        //{
                        if (d3 > InsDate)
                        {

                            if (i == 1)
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - d2;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                TimeSpan tm = InsDate - ldate;
                                double cd = tm.TotalDays;
                                double c = couponrate * (cd) / 365;
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        // }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                        string[] splitedDate = date.Split('/');
                        //Save this in MonthDay field
                        string monthDay = string.Join("/", splitedDate[1]);
                        //Save this in Year field
                        string year = splitedDate[2];
                        string day = splitedDate[0];
                        int y = Convert.ToInt32(year.ToString());
                        int m = Convert.ToInt32(monthDay.ToString());
                        int d = Convert.ToInt32(day.ToString());
                        TimeSpan tm = d3 - ldate;
                        double cd = tm.TotalDays;
                        double c = 100 + (couponrate * (cd) / 365);
                        cashFlowss.Add(c);
                        dateList.Add(new DateTime(y, m, d));
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }






                //for (int i = 1; i < UnitCount + 1; i++)
                //{
                //    DateTime InsDate = d2.AddMonths(i);
                //    string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                //    string[] splitedDate = date.Split('/');
                //    //Save this in MonthDay field
                //    string monthDay = string.Join("/",splitedDate[1]);
                //    //Save this in Year field
                //    string year = splitedDate[2];
                //    string day = splitedDate[0];
                //    int y = Convert.ToInt32(year.ToString());
                //    int m = Convert.ToInt32(monthDay.ToString());
                //    int d = Convert.ToInt32(day.ToString());
                //    if (InsDate == d3)
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(100 + cop);

                //        dateList.Add(new DateTime(y, m, d));

                //    }
                //    else
                //    {
                //        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                //        cashFlowss.Add(cop);
                //        dateList.Add(new DateTime(y, m, d));
                //    }
                //}
                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;
               
                     xir = (xr * 100) - 0.13;
                

                hfYieldValue.Value = xir.ToString("0.000");
            }

            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfMonth.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percentage != null || Percentage != "")
                            {
                                float percent = float.Parse(Percentage.ToString());


                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = percent + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                                tpercent = tpercent + percent;
                                ratevalue = ratevalue - percent;
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                // if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{

                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        //}
                                    }
                                    else
                                    {
                                        //if (d3 > InsDate)
                                        //{

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                        // }

                                        // }
                                    }
                                }
                                ldate = InsDate;
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            // if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    //}
                                }
                                else
                                {
                                    //if (d3 > InsDate)
                                    //{

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                    // }

                                    // }
                                }
                            }
                            ldate = InsDate;
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}
                        // ldate = InsDate;
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(percent);
                            float tpc = 100 - tpercent;
                            tpercent = tpercent + perc;
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));


                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tpc + ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tpc;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            double cop = Convert.ToDouble(couponrate.ToString("0.00"));

                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * (couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }

                    }

                    //if(ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));

                    //    float cop = 100 + (couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * nday / 365)+ couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 12);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string Percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Percent != null || Percent != "")
                            {
                                float perct = float.Parse(Percent);

                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));


                                    }
                                    else
                                    {

                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));

                                    }

                                    ldate = InsDate;
                                }
                            }
                        }
                        else
                        {
                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));


                                }
                                else
                                {

                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = (ratevalue * couponrate * (cd) / 36500);
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));

                                }

                                ldate = InsDate;
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}

                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string per = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float pert = float.Parse(per);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + pert;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                            ratevalue = ratevalue - tp;
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }


                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + couponrate;
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 3);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != null || perc != "")
                            {
                                float pert = float.Parse(perc);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = pert + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - pert;
                                    tpercent = tpercent + pert;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;

                                }
                            }
                        }
                        else
                        {

                            string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            //if (InsDate == d3)
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    cashFlowss.Add(100 + cop);

                            //    dateList.Add(new DateTime(y, m, d));

                            //}
                            //else
                            //{
                            if (d3 > InsDate)
                            {
                                if (i == 1)
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - d2;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                else
                                {
                                    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                    TimeSpan tm = InsDate - ldate;
                                    double cd = tm.TotalDays;
                                    double c = ratevalue * couponrate * (cd) / 36500;
                                    cashFlowss.Add(c);
                                    dateList.Add(new DateTime(y, m, d));
                                }
                                ldate = InsDate;
                            }
                        }
                        //else
                        //{
                        //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                        //    TimeSpan tm = d3 - ldate;
                        //    double cd = tm.TotalDays;
                        //    double c = 100 + (couponrate * (cd) / 365);
                        //    cashFlowss.Add(c);
                        //    dateList.Add(new DateTime(y, m, d));
                        //}


                        //}
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string pert = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            float perc = float.Parse(pert);
                            float tp = 100 - tpercent;
                            tpercent = tpercent + perc;

                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = tp + (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = ratevalue * couponrate * (cd) / 36500;
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }
                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/3);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    float ratevalue = 100, tpercent = 0;
                    UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = d2.AddMonths(i * 6);
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string percent = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (percent != "")
                            {
                                float perct = float.Parse(percent);
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                //if (InsDate == d3)
                                //{
                                //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                //    cashFlowss.Add(100 + cop);

                                //    dateList.Add(new DateTime(y, m, d));

                                //}
                                //else
                                //{
                                if (d3 > InsDate)
                                {

                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = perct + (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                    ratevalue = ratevalue - perct;
                                    tpercent = tpercent + perct;
                                }
                            }
                            else
                            {
                                string date = InsDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                if (d3 > InsDate)
                                {
                                    if (i == 1)
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - d2;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    else
                                    {
                                        double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                                        TimeSpan tm = InsDate - ldate;
                                        double cd = tm.TotalDays;
                                        double c = (ratevalue * couponrate * (cd) / 36500);
                                        cashFlowss.Add(c);
                                        dateList.Add(new DateTime(y, m, d));
                                    }
                                    ldate = InsDate;
                                }
                            }
                            //else
                            //{
                            //    double cop = Convert.ToDouble(couponrate.ToString("0.00"));
                            //    TimeSpan tm = d3 - ldate;
                            //    double cd = tm.TotalDays;
                            //    double c = 100 + (couponrate * (cd) / 365);
                            //    cashFlowss.Add(c);
                            //    dateList.Add(new DateTime(y, m, d));
                            //}


                            // }
                        }
                    }
                    if (d3 > ldate || d3 == ldate)
                    {
                        DataTable dt = dl.CheckMaturityTypeValue(Request.QueryString["oId"].ToString(), ldate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dt.Rows.Count > 0)
                        {
                            string perc = dt.Rows[0]["MaturityTypePercentage"].ToString();
                            if (perc != "")
                            {
                                float per = float.Parse(perc);
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                            else
                            {
                                float tp = 100 - tpercent;
                                string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                                string[] splitedDate = date.Split('/');
                                //Save this in MonthDay field
                                string monthDay = string.Join("/", splitedDate[1]);
                                //Save this in Year field
                                string year = splitedDate[2];
                                string day = splitedDate[0];
                                int y = Convert.ToInt32(year.ToString());
                                int m = Convert.ToInt32(monthDay.ToString());
                                int d = Convert.ToInt32(day.ToString());
                                TimeSpan tm = d3 - ldate;
                                double cd = tm.TotalDays;
                                double c = tp + (ratevalue * couponrate * (cd) / 36500);
                                cashFlowss.Add(c);
                                dateList.Add(new DateTime(y, m, d));
                            }
                        }
                        else
                        {
                            string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                            string[] splitedDate = date.Split('/');
                            //Save this in MonthDay field
                            string monthDay = string.Join("/", splitedDate[1]);
                            //Save this in Year field
                            string year = splitedDate[2];
                            string day = splitedDate[0];
                            int y = Convert.ToInt32(year.ToString());
                            int m = Convert.ToInt32(monthDay.ToString());
                            int d = Convert.ToInt32(day.ToString());
                            TimeSpan tm = d3 - ldate;
                            double cd = tm.TotalDays;
                            double c = (ratevalue * couponrate * (cd) / 36500);
                            cashFlowss.Add(c);
                            dateList.Add(new DateTime(y, m, d));
                        }
                    }

                    //if (ldate == d3)
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate/2);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                    //else
                    //{
                    //    string date = d3.ToString("dd/MM/yyyy").Replace("-", "/");
                    //    string[] splitedDate = date.Split('/');
                    //    //Save this in MonthDay field
                    //    string monthDay = string.Join("/", splitedDate[1]);
                    //    //Save this in Year field
                    //    string year = splitedDate[2];
                    //    string day = splitedDate[0];
                    //    int y = Convert.ToInt32(year.ToString());
                    //    int m = Convert.ToInt32(monthDay.ToString());
                    //    int d = Convert.ToInt32(day.ToString());
                    //    TimeSpan tt = d3 - ldate;
                    //    double noday = tt.TotalDays;
                    //    float nday = float.Parse(noday.ToString("0"));
                    //    float cop = 100 + (couponrate * (nday / 365) + couponrate);
                    //    cashFlowss.Add(cop);
                    //    dateList.Add(new DateTime(y, m, d));
                    //}
                }

                double[] cashflows = cashFlowss.ToArray();
                DateTime[] datess = dateList.ToArray();

                // Calculate XIRR
                double xirr = CalculateXIRR(cashflows, datess);
                double xr = xirr;
                double xir;
               
                    xir = (xr * 100) - 0.14;
                
                hfYieldValue.Value = xir.ToString("0.000");
            }

            //  Response.Write(xir);
            // lblXIRR.Text = xir.ToString("0.00");
        }
         
    }


    protected void txtSattlementdate_TextChanged(object sender, EventArgs e)
    {
        hfSattlementDate.Value = "";
        TextBox txtSattlementdate = sender as TextBox;

        RepeaterItem item = (RepeaterItem)txtSattlementdate.NamingContainer;
        hfSattlementDateforbond.Value = txtSattlementdate.Text;
        getYieldWithXIRRForInvestment();
        TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
        TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
        txtYTM.Text = hfYieldValue.Value;
        TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
        DateTime Sattles = DateTime.ParseExact(txtSattlementdate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime IPDat = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime IPDate = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattle = DateTime.ParseExact(txtSattlementdate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        hfSattlementDate.Value = txtSattlementdate.Text;
        hfIPDate.Value = txtLastIP.Text;
        lblLastIP.Text = txtLastIP.Text;
        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

        if (ddlPaymentType.Text == "Monthly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastMonthlyDate(Sattles, IPDat);
                    string Date = dt.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;

                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
                else
                {
                    DataTable dt = dl.get_MonthlyDate(Sattles, IPDat);
                    string Date = dt.Rows[0]["mth_start"].ToString();
                    hfQuar.Value = Date;

                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
            }
        }
        if (ddlPaymentType.Text == "Yearly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if(hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_YearlyDate(Sattle, IPDate);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                    }


                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }
                else
                {
                    DataTable dt = dl.get_YearlyDatesss(Sattle, IPDate);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;
                    }
                    DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                    TimeSpan objFirstInt = IPDates - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDates;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDates;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();
                }

            }
        }

        if (ddlPaymentType.Text == "Quarterly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {
                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastQuarterlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
                else
                {
                    DataTable dt = dl.get_QuarterlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
            }
        }

        if (ddlPaymentType.Text == "Half Yearly")
        {
            if (IPDate > Sattle)
            {

                TimeSpan objFirstInt = IPDate - Sattle;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = FirstDay + SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            else
            {

                if (hfEOM.Value == "1")
                {
                    DataTable dt = dl.get_LastHalfYearlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
                else
                {
                    DataTable dt = dl.get_HalfYearlyDate(Sattles, IPDat);
                    if (dt.Rows.Count > 0)
                    {
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
            }
        }

        if (ddlPaymentType.Text == "One Time Interest")
        {



            //TimeSpan objFirstInt = IPDate - Sattle;
            //float FirstDay = (float)objFirstInt.TotalDays;
            //hfFirstIntDay.Value = FirstDay.ToString();

            TimeSpan objSecondInt = Maturity - IPDate;
            float SecondDay = (float)objSecondInt.TotalDays;
            hfSecondIntDay.Value = SecondDay.ToString();
            float day = SecondDay;
            hfDayValue.Value = day.ToString();

            DateTime compareTo = IPDate;
            DateTime now = Maturity;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();




        }

    }
    private void createPerticularsTables()
    {
        DataTable dt = new DataTable();
        DataColumn columnAutoID = new DataColumn("AutoID", typeof(int));
        columnAutoID.AutoIncrement = true;
        columnAutoID.AutoIncrementSeed = 1;
        dt.Columns.Add(columnAutoID);
        dt.Columns.Add(new DataColumn("InterestDate", typeof(string)));
        //  dt.Columns.Add(new DataColumn("SLItemName", typeof(string)));

        dt.Columns.Add(new DataColumn("CouponRate", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue", typeof(string)));
        dt.Columns.Add(new DataColumn("PrincipalAmount", typeof(string)));
        dt.Columns.Add(new DataColumn("Percentage", typeof(string)));
        dt.Columns.Add(new DataColumn("DealValue", typeof(string)));
        dt.Columns.Add(new DataColumn("MonthDayValue", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue365", typeof(string)));

        dt.Rows.Clear();
        Session["dtPerticularss"] = dt;
        BindPerticularss(dt);
    }

    private void AddPerticularItems(string InterestDate, string CouponRate, string InterestValue, string PrincipalAmount, string Percentage, string DealValue, string MonthDayValue,string InterestValue365)
    {
        DataTable dtPerticularss = new DataTable();
        if (Session["dtPerticularss"] == null)
        {
            createPerticularsTables();
        }
        dtPerticularss = (DataTable)Session["dtPerticularss"];
        DataRow row = dtPerticularss.NewRow();

        row["InterestDate"] = InterestDate;
        row["CouponRate"] = CouponRate;
        row["InterestValue"] = InterestValue;
        row["PrincipalAmount"] = PrincipalAmount;
        row["Percentage"] = Percentage;
        row["DealValue"] = DealValue;
        row["MonthDayValue"] = MonthDayValue;
        row["InterestValue365"] = InterestValue365;
        dtPerticularss.Rows.Add(row);
        Session["dtPerticularss"] = dtPerticularss;
        BindPerticularss(dtPerticularss);

    }

    private void BindPerticularss(DataTable dtPerticularss)
    {
        DataTable dt = dtPerticularss;
        //rptStaggeredSheet.DataSource = dt;
        //rptStaggeredSheet.DataBind();
        rptstag.DataSource = dt;
        rptstag.DataBind();

    }
    private void createPerticularsTable()
    {
        DataTable dt = new DataTable();
        DataColumn columnAutoID = new DataColumn("AutoID", typeof(int));
        columnAutoID.AutoIncrement = true;
        columnAutoID.AutoIncrementSeed = 1;
        dt.Columns.Add(columnAutoID);
        dt.Columns.Add(new DataColumn("InterestDate", typeof(string)));
        //  dt.Columns.Add(new DataColumn("SLItemName", typeof(string)));
        dt.Columns.Add(new DataColumn("CouponRate", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue", typeof(string)));
        dt.Columns.Add(new DataColumn("MonthDayValue", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue365", typeof(string)));
        dt.Rows.Clear();
        Session["dtPerticulars"] = dt;
        BindPerticulars(dt);

    }

    private void AddPerticularItem(string InterestDate, string CouponRate, string InterestValue, string MonthDayValue ,string InterestValue365)
    {
        DataTable dtPerticulars = new DataTable();
        if (Session["dtPerticulars"] == null)
        {
            createPerticularsTable();
        }
        dtPerticulars = (DataTable)Session["dtPerticulars"];
        DataRow row = dtPerticulars.NewRow();

        row["InterestDate"] = InterestDate;
        row["CouponRate"] = CouponRate;
        row["InterestValue"] = InterestValue;
        row["MonthDayValue"] = MonthDayValue;
        row["InterestValue365"] = InterestValue365;
        dtPerticulars.Rows.Add(row);
        Session["dtPerticulars"] = dtPerticulars;
        BindPerticulars(dtPerticulars);

    }
    private void BindPerticulars(DataTable dtPerticulars)
    {
        //rptCash.DataSource = dtPerticulars;
        //rptCash.DataBind();
        rptbullet.DataSource = dtPerticulars;
        rptbullet.DataBind();
    }

    protected void lnkInterestSheet_Click(object sender, EventArgs e)
    {
        pnlViewInteresr.Visible = true;
        if (hfSattlementDate.Value == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Sattlement Date Must Be Enter', type: 'error',});", true);
            return;
        }
        createPerticularsTable();
        createPerticularsTables();
        float de = float.Parse(hfFacrValueForDeal.Value);
        string facedeal = Convert.ToDecimal(de).ToString("0.00");
       int IIdd= dl.add_CashFlowViews(null, GetUserLoggedIn(), hfProductsId.Value, hfPaymentType.Value, hfSattlementDate.Value, hfIPDate.Value, facedeal, hfTotalConserationAmount.Value, hfQuantity.Value, hfPrincipalAmount.Value, hfTotalAssuredInterest.Value, hfGrossConsideration.Value, hfRatePrice.Value);
        int IId = dl.add_CashFlows(null, GetUserLoggedIn(), hfProductsId.Value, hfPaymentType.Value, hfFacrValueForDeal.Value);
        float Deal = float.Parse(hfFacrValueForDeal.Value);
        string deal = Convert.ToDecimal(Deal).ToString("0.00");
        float coupon = float.Parse(hfCouponRate.Value);
        float Rate = float.Parse(hfRatePrice.Value);
        float FaceValue = float.Parse(hfFacrValueForDeal.Value);
        DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);


        if (ViewState["Id"] == null)
        {
            pnlViewSheet.Visible = false;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {

                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = Sattle;
                        DateTime InstallDate = IPDate;
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday = (float)FirstDay.TotalDays;
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);

                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float monthlyinterest = (((Deal * coupon * days) / 36500));
                            hfMonthlyInterest.Value = monthlyinterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, days.ToString(), hfMonthlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                            lastDate = InsDate;
                        }

                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
                        float LastMonth = (((Deal * coupon * LastMonthInt) / 36500) + (Rate * FaceValue / 100));
                        hfLastMonthly.Value = LastMonth.ToString();
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, LastMonthInt.ToString(), hfLastMonthly.Value);
                        dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastMonth.ToString(), null);
                    }
                    else
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float monthlyinterest = (((Deal * coupon * days) / 36500));
                            hfMonthlyInterest.Value = monthlyinterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, days.ToString(), hfMonthlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                            lastDate = InsDate;
                        }
                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
                        float LastMonth = (((Deal * coupon * LastMonthInt) / 36500) + (Rate * FaceValue / 100));
                        hfLastMonthly.Value = LastMonth.ToString();
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, LastMonthInt.ToString(), hfLastMonthly.Value);
                        dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                    }

                }
                if (hfPaymentType.Value == "Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-12);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, days.ToString(), hfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        DateTime InsDatess = InstallDate.AddMonths(-12);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, days.ToString(), hfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    
                        if(hfLastDate.Value !="")
                        {
                            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                            TimeSpan objtime = (Maturity - Last);
                            float dayss = (float)objtime.TotalDays;
                            float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-","/"), hfCouponRate.Value, last.ToString(), dayss.ToString(),last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                        }
                        else
                        {
                            DateTime Last = lastDate;
                            if(Maturity < Last)
                            {
                                TimeSpan objtime = (Maturity - Last);
                                float dayss = (float)objtime.TotalDays;
                                float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, last.ToString(), dayss.ToString(),last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                            }
                            else
                            {
                                TimeSpan objtime = (Maturity - Last);
                                float dayss = (float)objtime.TotalDays;
                                float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, last.ToString(), dayss.ToString(),last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                            }

                        }

                    }


                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-3);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, days.ToString(), hfQuarterlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(),last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.ToString(), hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-3);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, days.ToString(), hfQuarterlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(),last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }


                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-6);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, days.ToString(), hfHalfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value,  hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-6);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, days.ToString(), hfHalfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, last.ToString(), null);
                    }

                }
            }
            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate < Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                        TimeSpan FirstDay = (InstallDate - Salltle);
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                        if (dtc.Rows.Count > 0)
                        {
                            string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                            float percent = float.Parse(Percentage.ToString());

                            float fday = (float)FirstDay.TotalDays;
                            float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                            float Principal = (FaceValue * percent / 100);
                            hfFirstMonthly.Value = FirstMonth.ToString();


                            float fday365 = (float)firstdat365.TotalDays;
                            float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);

                            string dd = Convert.ToDecimal(Deal).ToString("0.00");
                            AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                            float face = (Deal - (FaceValue * percent / 100));
                            hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            DateTime lastDate = InstallDate;
                            float per = percent;
                            float Pers = 0;
                            int UnitCount = Convert.ToInt32(hfMonth.Value);
                            for (int i = 1; i < UnitCount + 1; i++)
                            {
                                DateTime InsDate = InstallDate.AddMonths(i);
                                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                                if (dtm.Rows.Count > 0)
                                {
                                    //float fas = float.Parse(hfFaceee.Value);
                                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                    if (Perc == null || Perc == "")
                                    {

                                    }
                                    else
                                    {
                                        float perce = float.Parse(Perc);
                                        TimeSpan objTimeSpan = InsDate - lastDate;
                                        float days = (float)objTimeSpan.TotalDays;
                                        float monthlyinterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                        float principal = ((FaceValue * perce / 100));
                                        hfMonthlyInterest.Value = monthlyinterest.ToString();
                                        string ddd = Convert.ToDecimal(face).ToString("0.00");
                                        AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                        dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                        lastDate = InsDate;
                                        float Faces = (face - (FaceValue * perce / 100));
                                        hfFaces.Value = Faces.ToString();
                                        face = Faces;
                                        float totalpercent = (Pers + perce);
                                        Pers = totalpercent;
                                        hfTotalPercent.Value = totalpercent.ToString();
                                    }
                                }
                                else
                                {

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((face * coupon * days) / 36500));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                    lastDate = InsDate;
                                }

                            }

                            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                            float facelast = float.Parse(hfFaces.Value);
                            float lastpercent = float.Parse(hfTotalPercent.Value);
                            if (dtn.Rows.Count > 0)
                            {
                                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float Percs = float.Parse(Perc);
                                    float Fulltotapercent = (per + lastpercent + Percs);
                                    float remainingpercent = (100 - Fulltotapercent);
                                    float totalper = (Percs + remainingpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100) + (FaceValue * remainingpercent / 100));
                                    float principal = (FaceValue * Percs / 100);
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    string dddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), totalper.ToString(), dddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                            }
                            else
                            {
                                float remainingpercent = (100 - (per + lastpercent));
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                                hfLastMonthly.Value = LastMonth.ToString();
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                            }


                        }
                        else
                        {
                            float fday = (float)FirstDay.TotalDays;
                            float FirstMonth = ((Deal * coupon * fday) / 36500);
                            hfFirstMonthly.Value = FirstMonth.ToString();
                            float fday365 = (float)firstdat365.TotalDays;
                            float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                            string dd = Convert.ToDecimal(Deal).ToString("0.00");
                            AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, null, null, dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                            hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            DateTime lastDate = InstallDate;
                            float Pers = 0;
                            int UnitCount = Convert.ToInt32(hfMonth.Value);
                            for (int i = 1; i < UnitCount + 1; i++)
                            {

                                DateTime InsDate = InstallDate.AddMonths(i);
                                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                                if (dtm.Rows.Count > 0)
                                {
                                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                    if (Perc == null || Perc == "")
                                    {

                                    }
                                    else
                                    {
                                        float perce = float.Parse(Perc);
                                        TimeSpan objTimeSpan = InsDate - lastDate;
                                        float days = (float)objTimeSpan.TotalDays;
                                        float monthlyinterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                        float principal = (FaceValue * perce / 100);
                                        hfMonthlyInterest.Value = monthlyinterest.ToString();

                                        string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                        AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                        dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                        lastDate = InsDate;
                                        float Faces = (Deal - (FaceValue * perce / 100));
                                        hfFaces.Value = Faces.ToString();
                                        Deal = Faces;
                                        float totalpercent = (Pers + perce);
                                        Pers = totalpercent;
                                        hfTotalPercent.Value = totalpercent.ToString();
                                    }
                                }
                                else
                                {
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((Deal * coupon * days) / 36500));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    string dddd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, null, null, dddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                    lastDate = InsDate;


                                }

                            }

                            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                            float facelast = float.Parse(hfFaces.Value);
                            float lastpercent = float.Parse(hfTotalPercent.Value);
                            if (dtn.Rows.Count > 0)
                            {
                                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {
                                    float remainingpercent = (100 - lastpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (facelast));
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    float principal = (FaceValue * remainingpercent / 100);
                                    string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                                else
                                {
                                    float Percs = float.Parse(Perc);
                                    float Fulltotalpercent = (lastpercent + Percs);
                                    float remainingpercent = (100 - Fulltotalpercent);
                                    float totalremainper = (Percs + remainingpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                    float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), totalremainper.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                            }
                            else
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (facelast));
                                hfLastMonthly.Value = LastMonth.ToString();
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                            }
                        }

                    }
                }

                if (hfPaymentType.Value == "Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-12);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);

                    DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dt.Rows.Count > 0)
                    {
                        string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float Percent = float.Parse(Percentage);
                        float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                        float Principal = (FaceValue * Percent / 100);
                        hfFirstYearly.Value = FirstYear.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * Percent / 100);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, Principal.ToString(), Percent.ToString(), dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;

                        float face = (FaceValue - (FaceValue * Percent / 100));
                        float per = Percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {

                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float yearlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfYearlyInterest.Value = yearlyInterest.ToString();
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((face * coupon * days) / 36500));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                string ddd = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }

                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remainingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {

                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, null, null, dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float yearlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfYearlyInterest.Value = yearlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((Deal * coupon * days) / 36500));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }


                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remaingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remaingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remaingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remaingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }

                }

                if (hfPaymentType.Value == "Quarterly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-3);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float Principal = (FaceValue * percent / 100);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        float face = (Deal - (FaceValue * percent / 100));
                        DateTime lastDate = InstallDate;
                        float per = percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float QuertarlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((face * coupon * days) / 36500));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                string ddd = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remainingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, null, null, ddd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float QuertarlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string dd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, principal.ToString(), perce.ToString(), dd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                string dd = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, null, null, dd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }

                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = (FaceValue * remainingpercent / 100);
                                string dd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float totalper = (Percs + remainingpercent);
                                string dd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string dd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }
                    }

                }

                if (hfPaymentType.Value == "Half Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-6);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        float Principal = (FaceValue * percent / 100);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);
                        string dd = Convert.ToDecimal(deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        float face = (Deal - (FaceValue * percent / 100));
                        float per = percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {

                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float halfInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string fa = Convert.ToDecimal(face).ToString("0.00");
                                    
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, principal.ToString(), perce.ToString(), fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((face * coupon * days) / 36500));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                string fa = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, null, null, fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float totalper = (Percs + remainingpercent);
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * remainingpercent / 100);
                            string fa = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), LastYearly.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, null, null, deal.ToString(), fday365.ToString(),FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float halfInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                    string fa = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, principal.ToString(), perce.ToString(), fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((Deal * coupon * days) / 36500));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                string fa = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, null, null, fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = (FaceValue * remainingpercent / 100);
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float totalper = (Percs + remainingpercent);
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string fa = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }

                }
            }
            if (hfMaturityType.Value == "Cumulative")
            {
                pnlDetailsCumulative.Visible = true;
                lblInterestDate.Text = hfMaturityDate.Value;
                lblDays.Text = hfDayValue.Value;
                lblInterest.Text = Convert.ToString(string.Format("{0:0.00}", hfTotalGrossAmount.Value));
                lblCoupon.Text = hfCouponRate.Value;
            }

            //BindInterestView();
            DataTable dtg = dl.get_CashFlowView(IIdd.ToString(), GetUserLoggedIn(), null, true);
            if (dtg.Rows.Count > 0)
            {
                string ProductName = dtg.Rows[0]["Security"].ToString();
                string cEmail = dtg.Rows[0]["CEmail"].ToString();
                string CFullName = dtg.Rows[0]["CFullName"].ToString();
                string fDeal = dtg.Rows[0]["FaceValueForDeal"].ToString();
                string MaturityDate = dtg.Rows[0]["MaturityDate"].ToString();
                string IPDates = dtg.Rows[0]["LastIpdate"].ToString();
                string sdate = dtg.Rows[0]["SattlementDate"].ToString();
                string rmemail = dtg.Rows[0]["RMEmail"].ToString();
                string EntryDate = dtg.Rows[0]["EntryDate"].ToString();
               // sms.sendBondinterestforRM(ProductName, cEmail, CFullName, fDeal, MaturityDate, IPDates, sdate, rmemail, EntryDate);
            }
        }




    }

    protected void rptChart_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
       
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {


            //Panel pnlTimelineShow = (e.Item.FindControl("pnlTimelineShow") as Panel);
            //Panel pnlTimeLineFill = (e.Item.FindControl("pnlTimeLineFill") as Panel);
            //HiddenField hfInterest = (e.Item.FindControl("hfInterest") as HiddenField);
            //    if (hfInterest.Value == "Approved")
            //    {
            //        pnlTimeLineFill.Visible = true;
            //        pnlTimelineShow.Visible = false;
            //    }
            //    if (hfInterest.Value == "Pending")
            //    {
            //        pnlTimeLineFill.Visible = false;
            //        pnlTimelineShow.Visible = true;
            //    }



        }
    }


    protected void rptChartFace_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            HiddenField hfCashFlowId = (e.Item.FindControl("hfCashFlowId") as HiddenField);
            Repeater rptChart = (e.Item.FindControl("rptChart") as Repeater);
            rptChart.DataSource = dl.get_CashFlowViewDetails(null, hfCashFlowId.Value, GetUserLoggedIn(), hfProductsId.Value, null);
            rptChart.DataBind();

        }
    }

    protected void LinkButton3_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = true;
        //Response.Redirect("signin?url=" + Server.UrlEncode(Request.Url.AbsoluteUri));
    }



    protected void rptStaggeredSheet_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            foreach (RepeaterItem rpt in rptStaggeredSheet.Items)
            {
                HiddenField hfPrincipal = rpt.FindControl("hfPrincipal") as HiddenField;
                Label Label1 = rpt.FindControl("Label1") as Label;
                Label Label2 = rpt.FindControl("Label2") as Label;
                Panel pnlHide = rpt.FindControl("pnlHide") as Panel;
                if (hfPrincipal.Value != "")
                {
                    pnlHide.Visible = true;
                }
                if (hfPrincipal.Value == "")
                {
                    pnlHide.Visible = false;
                }
            }

        }
    }



    protected void rptDeal_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            getYieldWithXIRR();
            TextBox MaturityDate = (e.Item.FindControl("txtMaturityDate") as TextBox);
            TextBox txtYTM = (e.Item.FindControl("txtYTM") as TextBox);
            hfMaturityDate.Value = MaturityDate.Text;
            TextBox PriceRate = (e.Item.FindControl("txtRate") as TextBox);
            if (PriceRate.Text == "0" || PriceRate.Text == "")
            {
                PriceRate.Text = "100";
            }
            float ytm = float.Parse(hfYieldValue.Value);
            txtYTM.Text = ytm.ToString("0.000");

            //hfRatePrice.Value = PriceRate.Text;

        }
    }

    protected void lnkDInterestSheet_Click(object sender, EventArgs e)
    {
        if (hfSattlementDate.Value == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Sattlement Date Must Be Enter', type: 'error',});", true);
            return;
        }
        createPerticularsTableD();
        createPerticularsTablesD();
        float de = float.Parse(hfFacrValueForDeal.Value);
        string facedeal = Convert.ToDecimal(de).ToString("0.00");
        float Deal = float.Parse(hfFacrValueForDeal.Value);
        string deal = Convert.ToDecimal(Deal).ToString("0.00");
        float coupon = float.Parse(hfCouponRate.Value);
        float Rate = float.Parse(hfRatePrice.Value);
        float FaceValue = float.Parse(hfFacrValueForDeal.Value);
        DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);


        if (ViewState["Id"] == null)
        {
            pnlViewSheet.Visible = false;
            if (hfMaturityType.Value == "Bullet" || hfMaturityType.Value == "Cumulative")
            {

                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = Sattle;
                        DateTime InstallDate = IPDate;
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday.ToString());
                    }
                    else
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday.ToString());
                    }

                }
                if (hfPaymentType.Value == "Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();

                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday.ToString());
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday.ToString());
                    }


                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday.ToString());
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday.ToString());
                    }


                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday.ToString());
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (Salltle - InstallDate);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        AddPerticularItemD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday.ToString());
                    }

                }
            }
            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {

                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                        TimeSpan FirstDay = (Salltle - InstallDate);

                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItemsD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, null, null, Deal.ToString(), fday.ToString());

                    
                }

                if (hfPaymentType.Value == "Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)FirstDay.TotalDays;
                    float FirstYear = ((Deal * coupon * fday) / 36500);
                    hfFirstYearly.Value = FirstYear.ToString();
                    AddPerticularItemsD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, null, null, Deal.ToString(), fday.ToString());

                }

                if (hfPaymentType.Value == "Quarterly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)FirstDay.TotalDays;

                    float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    AddPerticularItemsD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, null, null, Deal.ToString(), fday.ToString());

                }

                if (hfPaymentType.Value == "Half Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)FirstDay.TotalDays;

                    float FirstHalfY = ((Deal * coupon * fday) / 36500);
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    AddPerticularItemsD(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, null, null, deal.ToString(), fday.ToString());

                }
            }
            if (hfMaturityType.Value == "Cumulative")
            {
                pnlDetailsCumulative.Visible = true;
                lblInterestDate.Text = hfMaturityDate.Value;
                lblDays.Text = hfDayValue.Value;
                lblInterest.Text = Convert.ToString(string.Format("{0:0.00}", hfTotalGrossAmount.Value));
                lblCoupon.Text = hfCouponRate.Value;
            }

        }
    }

    protected void txtSattlementdateD_TextChanged(object sender, EventArgs e)
    {
        if(GetUserLoggedIn() ==null)
        {
            pnlAllData.Visible = false;
            pnllogindata2.Visible = true;
        }

        TextBox txtSattlementdate = sender as TextBox;

        RepeaterItem item = (RepeaterItem)txtSattlementdate.NamingContainer;
        TextBox txtYTM = item.FindControl("txtYTM") as TextBox;
        hfSattlementDateforbond.Value = txtSattlementdate.Text;
        getYieldWithXIRRForDeal();
        txtYTM.Text = hfYieldValue.Value;
        TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
        TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
        DateTime Sattles = DateTime.ParseExact(txtSattlementdate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime IPDat = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime IPDate = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        DateTime Sattle = DateTime.ParseExact(txtSattlementdate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
        hfSattlementDate.Value = txtSattlementdate.Text;
        hfIPDate.Value = txtLastIP.Text;

        DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

        if (ddlPaymentType.Text == "Monthly")
        {
            TimeSpan objFirstInt = Sattle - IPDate;
            float FirstDay = (float)objFirstInt.TotalDays;
            hfFirstIntDay.Value = FirstDay.ToString();
            hfDayValue.Value = FirstDay.ToString();
            DateTime compareTo = IPDate;
            DateTime now = Sattle;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();


        }
        if (ddlPaymentType.Text == "Yearly")
        {
            TimeSpan objFirstInt = Sattle - IPDate;
            float FirstDay = (float)objFirstInt.TotalDays;
            hfFirstIntDay.Value = FirstDay.ToString();
            hfDayValue.Value = FirstDay.ToString();
            DateTime compareTo = IPDate;
            DateTime now = Sattle;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();



        }

        if (ddlPaymentType.Text == "Quarterly")
        {
            TimeSpan objFirstInt = Sattle - IPDate;
            float FirstDay = (float)objFirstInt.TotalDays;
            hfFirstIntDay.Value = FirstDay.ToString();
            hfDayValue.Value = FirstDay.ToString();
            DateTime compareTo = IPDate;
            DateTime now = Sattle;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();

        }

        if (ddlPaymentType.Text == "Half Yearly")
        {
            TimeSpan objFirstInt = Sattle - IPDate;
            float FirstDay = (float)objFirstInt.TotalDays;
            hfFirstIntDay.Value = FirstDay.ToString();
            hfDayValue.Value = FirstDay.ToString();
            DateTime compareTo = IPDate;
            DateTime now = Sattle;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();

        }

        if (ddlPaymentType.Text == "One Time Interest")
        {
            TimeSpan objFirstInt = Sattle - IPDate;
            float FirstDay = (float)objFirstInt.TotalDays;
            hfFirstIntDay.Value = FirstDay.ToString();
            hfDayValue.Value = FirstDay.ToString();
            DateTime compareTo = IPDate;
            DateTime now = Sattle;
            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
            var TotalYear = dateSpan.Years;
            hfTotalYear.Value = TotalYear.ToString();
            var TotalMonth = dateSpan.Months;
            hfTotalMonth.Value = TotalMonth.ToString();
            var TotalDay = dateSpan.Days;
            hfTotalDay.Value = TotalDay.ToString();

        }

    }

    protected void txtFaceValueDealD_TextChanged(object sender, EventArgs e)
    {
        PaymentTypes();

        //   BindData();
        if (hfMaturityType.Value == "Bullet")
        {
            if(GetUserLoggedIn() !=null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }


            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");


            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
           // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");

            lblDealDate.Text = txtDealDate.Text;
            lblSattlementDate.Text = txtSattlementdate.Text;
            lblSecurity.Text = hfSecurity.Value;
            lblISINNumber.Text = txtISINNumber.Text;
            lblCouponRate.Text = txtCouponRate.Text;
            lblMaturityDate.Text = txtMaturityDate.Text;
            lblIPDate.Text = hfIPDate.Value;
            lblMaturitytype.Text = ddlPaymentType.Text;
            lblPutDate.Text = hfPutDate.Value;
            lblCallDate.Text = hfCallDate.Value;
            lblLastIPDate.Text = txtLastIP.Text;

            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            lblNoOfDays.Text = NDay.ToString();
            lblFacevaluebond.Text = txtFaceValueBond.Text;
            lblQuantity.Text = txtQuantity.Text;
            lblRate.Text = txtRate.Text;
            lblYTM.Text = hfYieldValue.Value;
            lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
            lblPrincipalAmount.Text = txtPrincipalAmount.Text;
            lblAccuredInterest.Text = txtAccured.Text;
            lblTotalConsideration.Text = txtGrossConder.Text;
            lblStampduty.Text = txtStampDuty.Text;
            lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
            int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, NDay.ToString(), txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text,txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
            if(IId !=0)
            {
                hfDealConfirmationId.Value = IId.ToString();
            }
        }

        if (hfMaturityType.Value == "Cumulative")
        {
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }
            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantity");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
           // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            float total = float.Parse(txtConsiderationStamp.Text);
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            float TotalGrossAmount = FaceValue + total;
            hfTotalGrossAmount.Value = TotalGrossAmount.ToString();

            lblDealDate.Text = txtDealDate.Text;
            lblSattlementDate.Text = txtSattlementdate.Text;
            lblSecurity.Text = hfSecurity.Value;
            lblISINNumber.Text = txtISINNumber.Text;
            lblCouponRate.Text = txtCouponRate.Text;
            lblMaturityDate.Text = txtMaturityDate.Text;
            lblIPDate.Text = hfIPDate.Value;
            lblMaturitytype.Text = ddlPaymentType.Text;
            lblPutDate.Text = hfPutDate.Value;
            lblCallDate.Text = hfCallDate.Value;
            lblLastIPDate.Text = txtLastIP.Text;

            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            lblNoOfDays.Text = NDay.ToString();
            lblFacevaluebond.Text = txtFaceValueBond.Text;
            lblQuantity.Text = txtQuantity.Text;
            lblRate.Text = txtRate.Text;
            lblYTM.Text = hfYieldValue.Value;
            lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
            lblPrincipalAmount.Text = txtPrincipalAmount.Text;
            lblAccuredInterest.Text = txtAccured.Text;
            lblTotalConsideration.Text = txtGrossConder.Text;
            lblStampduty.Text = txtStampDuty.Text;
            lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
           int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, NDay.ToString(), txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
            if (IId != 0)
            {
                hfDealConfirmationId.Value = IId.ToString();
            }
        }

        if (hfMaturityType.Value == "Staggered")
        {
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }
            TextBox txtFaceValueDeal = sender as TextBox;
            RepeaterItem item = (RepeaterItem)txtFaceValueDeal.NamingContainer;
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantity");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            float Deal = float.Parse(hfFacrValueForDeal.Value);
            float coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = coupon.ToString();
            DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            if (hfPaymentType.Value == "Monthly")
            {
                if (IPDate < Sattle)
                {
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                    TimeSpan FirstDay = (Salltle - InstallDate);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                        float percent = float.Parse(Percentage.ToString());

                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        float Principal = (FaceValue * percent / 100);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        float face = (Deal - (FaceValue * percent / 100));
                        hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();

                    }
                    else
                    {
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                    float Accured = float.Parse(txtAccured.Text);
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                    lblDealDate.Text = txtDealDate.Text;
                    lblSattlementDate.Text = txtSattlementdate.Text;
                    lblSecurity.Text = hfSecurity.Value;
                    lblISINNumber.Text = txtISINNumber.Text;
                    lblCouponRate.Text = txtCouponRate.Text;
                    lblMaturityDate.Text = txtMaturityDate.Text;
                    lblIPDate.Text = hfIPDate.Value;
                    lblMaturitytype.Text = ddlPaymentType.Text;
                    lblPutDate.Text = hfPutDate.Value;
                    lblCallDate.Text = hfCallDate.Value;
                    lblLastIPDate.Text = txtLastIP.Text;

                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                  
                    lblFacevaluebond.Text = txtFaceValueBond.Text;
                    lblQuantity.Text = txtQuantity.Text;
                    lblRate.Text = txtRate.Text;
                    lblYTM.Text = hfYieldValue.Value;
                    lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
                    lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                    lblAccuredInterest.Text = txtAccured.Text;
                    lblTotalConsideration.Text = txtGrossConder.Text;
                    lblStampduty.Text = txtStampDuty.Text;
                    lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                    int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                    if (IId != 0)
                    {
                        hfDealConfirmationId.Value = IId.ToString();
                    }
                }

            }

            if (hfPaymentType.Value == "Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dt.Rows.Count > 0)
                {
                    string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                    float Percent = float.Parse(Percentage);
                    float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                    float Principal = (FaceValue * Percent / 100);
                    hfFirstYearly.Value = FirstYear.ToString();
                    DateTime lastDate = InstallDate;
                    float face = (FaceValue - (FaceValue * Percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();

                }
                else
                {

                    float FirstYear = ((Deal * coupon * fday) / 36500);
                    hfFirstYearly.Value = FirstYear.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
              
                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = hfYieldValue.Value;
                lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

            if (hfPaymentType.Value == "Quarterly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float Principal = (FaceValue * percent / 100);
                    float face = (Deal - (FaceValue * percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                else
                {
                    float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                float Accured = float.Parse(txtAccured.Text);
                hfTotalAssuredInterest.Value = txtAccured.Text;
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                float GrossCo = float.Parse(txtGrossConder.Text);
                hfGrossConsideration.Value = txtGrossConder.Text;
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = hfYieldValue.Value;
                lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

            if (hfPaymentType.Value == "Half Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDate.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    float Principal = (FaceValue * percent / 100);
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float face = (Deal - (FaceValue * percent / 100));
                    float per = percent;
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                else
                {
                    float FirstHalfY = ((Deal * coupon * fday) / 36500);
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                if (txtAccured.Text == null || txtAccured.Text == "")
                {

                }
                else
                {
                    float Accured = float.Parse(txtAccured.Text);

                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    float stamp = float.Parse(txtStampDuty.Text);
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = hfYieldValue.Value;
                lblFaceValueofdeal.Text = txtFaceValueDeal.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDeal.Text, txtLastIP.Text,txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

        }
        if (GetUserLoggedIn() != null)
        {
           // Panel1.Visible = true;
            //Panel2.Visible = false;
        }
        else
        {
           // Panel1.Visible = false;
            //Panel2.Visible = true;
        }

    }
    

    private void createPerticularsTablesD()
    {
        DataTable dt = new DataTable();
        DataColumn columnAutoID = new DataColumn("AutoID", typeof(int));
        columnAutoID.AutoIncrement = true;
        columnAutoID.AutoIncrementSeed = 1;
        dt.Columns.Add(columnAutoID);
        dt.Columns.Add(new DataColumn("InterestDate", typeof(string)));
        //  dt.Columns.Add(new DataColumn("SLItemName", typeof(string)));

        dt.Columns.Add(new DataColumn("CouponRate", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue", typeof(string)));
        dt.Columns.Add(new DataColumn("PrincipalAmount", typeof(string)));
        dt.Columns.Add(new DataColumn("Percentage", typeof(string)));
        dt.Columns.Add(new DataColumn("DealValue", typeof(string)));
        dt.Columns.Add(new DataColumn("MonthDayValue", typeof(string)));

        dt.Rows.Clear();
        Session["dtPerticularss"] = dt;
        BindPerticularssD(dt);
    }

    private void AddPerticularItemsD(string InterestDate, string CouponRate, string InterestValue, string PrincipalAmount, string Percentage, string DealValue, string MonthDayValue)
    {
        DataTable dtPerticularss = new DataTable();
        if (Session["dtPerticularss"] == null)
        {
            createPerticularsTablesD();
        }
        dtPerticularss = (DataTable)Session["dtPerticularss"];
        DataRow row = dtPerticularss.NewRow();

        row["InterestDate"] = InterestDate;
        row["CouponRate"] = CouponRate;
        row["InterestValue"] = InterestValue;
        row["PrincipalAmount"] = PrincipalAmount;
        row["Percentage"] = Percentage;
        row["DealValue"] = DealValue;
        row["MonthDayValue"] = MonthDayValue;

        dtPerticularss.Rows.Add(row);
        Session["dtPerticularss"] = dtPerticularss;
        BindPerticularssD(dtPerticularss);

    }

    private void BindPerticularssD(DataTable dtPerticularss)
    {
        DataTable dt = dtPerticularss;
        rptSFlow.DataSource = dt;
        rptSFlow.DataBind();

    }
    private void createPerticularsTableD()
    {
        DataTable dt = new DataTable();
        DataColumn columnAutoID = new DataColumn("AutoID", typeof(int));
        columnAutoID.AutoIncrement = true;
        columnAutoID.AutoIncrementSeed = 1;
        dt.Columns.Add(columnAutoID);
        dt.Columns.Add(new DataColumn("InterestDate", typeof(string)));
        //  dt.Columns.Add(new DataColumn("SLItemName", typeof(string)));

        dt.Columns.Add(new DataColumn("CouponRate", typeof(string)));
        dt.Columns.Add(new DataColumn("InterestValue", typeof(string)));
        dt.Columns.Add(new DataColumn("MonthDayValue", typeof(string)));




        dt.Rows.Clear();
        Session["dtPerticulars"] = dt;
        BindPerticularsD(dt);

    }

    private void AddPerticularItemD(string InterestDate, string CouponRate, string InterestValue, string MonthDayValue)
    {
        DataTable dtPerticulars = new DataTable();
        if (Session["dtPerticulars"] == null)
        {
            createPerticularsTableD();
        }
        dtPerticulars = (DataTable)Session["dtPerticulars"];
        DataRow row = dtPerticulars.NewRow();

        row["InterestDate"] = InterestDate;
        row["CouponRate"] = CouponRate;
        row["InterestValue"] = InterestValue;
        row["MonthDayValue"] = MonthDayValue;

        dtPerticulars.Rows.Add(row);
        Session["dtPerticulars"] = dtPerticulars;
        BindPerticularsD(dtPerticulars);

    }
    private void BindPerticularsD(DataTable dtPerticulars)
    {

        rptFlow.DataSource = dtPerticulars;
        rptFlow.DataBind();

    }

    private void ClearFields()
    {
        foreach (RepeaterItem item in rptDeal.Items)
        {
            //TextBox txtRate = item.FindControl("txtRate") as TextBox;
            TextBox txtSattlementdateD = item.FindControl("txtSattlementdateD") as TextBox;
            TextBox txtFaceValueDealD = item.FindControl("txtFaceValueDealD") as TextBox;
            TextBox txtNumberDays = item.FindControl("txtNumberDays") as TextBox;
            TextBox txtQuantity = item.FindControl("txtQuantityValue") as TextBox;
            TextBox txtPrincipalAmount = item.FindControl("txtPrincipalAmount") as TextBox;
            TextBox txtAccured = item.FindControl("txtAccured") as TextBox;
            TextBox txtGrossConder = item.FindControl("txtGrossConder") as TextBox;
            TextBox txtStampDuty = item.FindControl("txtStampDuty") as TextBox;
            TextBox txtConsiderationStamp = item.FindControl("txtConsiderationStamp") as TextBox;
            TextBox txtDealDate = item.FindControl("txtDealDate") as TextBox;


            //txtRate.Text = string.Empty;
            txtSattlementdateD.Text = string.Empty;
            txtFaceValueDealD.Text = string.Empty;
            txtNumberDays.Text = string.Empty;
            txtQuantity.Text = string.Empty;
            txtPrincipalAmount.Text = string.Empty;
            txtAccured.Text = string.Empty;
            txtGrossConder.Text = string.Empty;
            txtStampDuty.Text = string.Empty;
            txtConsiderationStamp.Text = string.Empty;
            txtDealDate.Text = string.Empty;
            hfDealConfirmationId.Value = null;
            pnlDealConfirmation.Visible = false;
            lnkprint.Visible = false;
        }
    }
    protected void lnkClearfield_Click(object sender, EventArgs e)
    {
        ClearFields();
    }

    protected void lnktab1_Click(object sender, EventArgs e)
    {
        lnktab1.Attributes["class"] = "tab-link active";
        lnktab2.Attributes["class"] = "tab-link";
        lnktab3.Attributes["class"] = "tab-link";
        lnktab4.Attributes["class"] = "tab-link";      
        pnl1.Visible = true;
        pnl2.Visible = false;
        pnl3.Visible = false;
        pnl4.Visible = false;

    }

    protected void lnktab4_Click(object sender, EventArgs e)
    {
        lnktab1.Attributes["class"] = "tab-link";
        lnktab2.Attributes["class"] = "tab-link";
        lnktab3.Attributes["class"] = "tab-link";
        lnktab4.Attributes["class"] = "tab-link active";
        pnl1.Visible = false;
        pnl2.Visible = false;
        pnl3.Visible = false;
        pnl4.Visible = true;

    }

    protected void lnktab2_Click(object sender, EventArgs e)
    {
        lnktab1.Attributes["class"] = "tab-link";
        lnktab2.Attributes["class"] = "tab-link active";
        lnktab3.Attributes["class"] = "tab-link";
        lnktab4.Attributes["class"] = "tab-link";
        pnl1.Visible = false;
        pnl2.Visible = true;
        pnl3.Visible = false;
        pnl4.Visible = false;
    }

    protected void lnktab3_Click(object sender, EventArgs e)
    {
        lnktab1.Attributes["class"] = "tab-link";
        lnktab2.Attributes["class"] = "tab-link";
        lnktab3.Attributes["class"] = "tab-link active";
        lnktab4.Attributes["class"] = "tab-link";
        pnl1.Visible = false;
        pnl2.Visible = false;
        pnl3.Visible = true;
        pnl4.Visible = false;
    }

    protected void lnkClear_Click(object sender, EventArgs e)
    {
        foreach (RepeaterItem item in rptBondCalculator.Items)
        {
            TextBox txtSattlementdate = item.FindControl("txtSattlementdate") as TextBox;
            TextBox txtFaceValueDeal = item.FindControl("txtFaceValueDeal") as TextBox;
            TextBox txtNumberDays = item.FindControl("txtNumberDays") as TextBox;
            TextBox txtQuantity = item.FindControl("txtQuantity") as TextBox;
            TextBox txtPrincipalAmount = item.FindControl("txtPrincipalAmount") as TextBox;
            TextBox txtAccured = item.FindControl("txtAccured") as TextBox;
            TextBox txtGrossConder = item.FindControl("txtGrossConder") as TextBox;
            TextBox txtStampDuty = item.FindControl("txtStampDuty") as TextBox;
            TextBox txtConsiderationStamp = item.FindControl("txtConsiderationStamp") as TextBox;

            txtSattlementdate.Text = string.Empty;
            txtFaceValueDeal.Text = string.Empty;
            txtNumberDays.Text = string.Empty;
            txtQuantity.Text = string.Empty;
            txtPrincipalAmount.Text = string.Empty;
            txtAccured.Text = string.Empty;
            txtGrossConder.Text = string.Empty;
            txtStampDuty.Text = string.Empty;
            txtConsiderationStamp.Text = string.Empty;
        }
    }

    // Signin Data

    protected void lnkSubmit_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = true;
        if (hfOTP.Value == (txtOTP.Text))
        {
            DataTable dtUserDetails = dl.CheckMobileNumberExist(txtUserName.Text);
            if (dtUserDetails != null && dtUserDetails.Rows.Count > 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Login Successfully..!!!', type: 'success',});", true);
                
                WriteCookie(dtUserDetails.Rows[0]["CustomerId"].ToString());
                lblCustomers.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                lblCustomerName.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                lblCustomer.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                pnlAllData.Visible = true;
                pnlLoginData.Visible = false;
                pnlCashFlow.Visible = true;
                pnl.Visible = true;
                pnlViewSheet.Visible = true;
                pnlLoginToView.Visible = false;
                pnlInvest.Visible = true;
                pnlinvestlogin.Visible = false;
                pnlDealConfirmation.Visible = true;

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Invalid Credential..!!!', type: 'error',});", true);
                return;
            }

        }
        else
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Please Enter Correct OTP', type: 'error',});", true);
        }

    }
    private void WriteCookie(string CustomerId)
    {
        //Create a new cookie, passing the name into the constructor
        HttpCookie cookie = new HttpCookie("DGBAM");
        //Set the cookies value
        cookie.Value = CustomerId;
        //cookie.Path = "/; SameSite=None";
        //      cookie.Secure = true;
        //        cookie.HttpOnly = true;

        //Set the cookie to expire in 1 minute
        DateTime dtNow = DateTime.Now;
        TimeSpan tsMinute = new TimeSpan(2, 0, 0, 0);
        cookie.Expires = dtNow + tsMinute;

        //Add the cookie
        Response.Cookies.Add(cookie);
    }
    protected string Generate_otp()
    {
        char[] charArr = "0123456789".ToCharArray();
        string strrandom = string.Empty;
        Random objran = new Random();
        for (int i = 0; i < 6; i++)
        {
            //It will not allow Repetation of Characters
            int pos = objran.Next(1, charArr.Length);
            if (!strrandom.Contains(charArr.GetValue(pos).ToString())) strrandom += charArr.GetValue(pos);
            else i--;
        }
        return strrandom;
    }
    protected void lnkGetOTP_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = true;
        string otp = Generate_otp();
        string Mobile = null, Email = null;
        if (txtUserName.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Mobile must be Added..!!!', type: 'error',});", true);
            return;
        }
        if(!IsValidMail(txtUserName.Text))
        {
            Mobile = txtUserName.Text;
        }
        else
        {
            Email = txtUserName.Text;
        }
        DataTable dt = dl.CheckMobileNumberExist(txtUserName.Text);
        if (dt.Rows.Count > 0)
        {
            if (Mobile != null)
            {
                hfOTP.Value = otp;
                new MSG91SMS().sendOTP("91" + txtUserName.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your mobile no..!!!', type: 'success',});", true);
                votp.Visible = true;
                txtUserName.ReadOnly = true;
                lnkSubmit.Visible = true;
                lnkGetOTP.Visible = false;
                //pnlResend.Visible = true;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
            else
            {
                hfOTP.Value = otp;
                sendMailMSG91(Email, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your mobile no..!!!', type: 'success',});", true);
                votp.Visible = true;
                txtUserName.ReadOnly = true;
                lnkSubmit.Visible = true;
                lnkGetOTP.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Mobile number not registered..!!!', type: 'error',});", true);
            return;
        }
    }

    protected void lnkResend_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = true;
        string otp = Generate_otp();
        string Mobile = null, Email = null;
        if (txtUserName.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Mobile must be Added..!!!', type: 'error',});", true);
            return;
        }
        if(!IsValidMail(txtUserName.Text))
        {
            Mobile = txtUserName.Text;
        }
        else
        {
            Email = txtUserName.Text;
        }
        DataTable dt = dl.CheckMobileNumberExist(txtUserName.Text);
        if (dt.Rows.Count > 0)
        {
            if (Mobile != null)
            {
                hfOTP.Value = otp;
                new MSG91SMS().sendOTP("91" + txtUserName.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your mobile no..!!!', type: 'success',});", true);
                votp.Visible = true;
                txtUserName.ReadOnly = true;
                lnkSubmit.Visible = true;
                lnkGetOTP.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
            else
            {
                hfOTP.Value = otp;
                sendMailMSG91(Email, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your email..!!!', type: 'success',});", true);
                votp.Visible = true;
                txtUserName.ReadOnly = true;
                lnkSubmit.Visible = true;
                lnkGetOTP.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
        }
    }

    private void sendMailMSG91(string eMail, string otp)
    {
        List<Recipient> _recipients = new List<Recipient>();
        Recipient recipient = new Recipient();
        List<To> to = new List<To>();
        To _to = new To();
        _to.email = eMail;
        Variables _var = new Variables();
        _var.otp = otp;
        _var.company_name = "Bonds Adda";
        to.Add(_to);
        recipient.to = to;
        recipient.variables = _var;
        _recipients.Add(recipient);
        new MSG91mail().send_Mail_Otp(_recipients);
    }

    protected void lnkinvest_Click(object sender, EventArgs e)
    {
        vinvesttype.Visible = true;
        vsubmit.Visible = true;
    }

    protected void lnkSubmitDetails_Click(object sender, EventArgs e)
    {
        if(ddlInvestType.SelectedValue == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Invest type must be Added..!!!', type: 'error',});", true);
            return;
        }
        if (ViewState["Id"] == null)
        {
            string decryptedText = EncryptionHelper.Decrypt(Request.QueryString["oId"].ToString());
            if (dl.add_Investment(null, decryptedText.ToString(),GetUserLoggedIn(),null,null,ddlInvestType.SelectedValue, GetUserLoggedIn()))
            {
                DataTable dt = dl.getCustomerKYC(GetUserLoggedIn(), null);
                DataTable dtc = dl.get_BankDetails(null, GetUserLoggedIn(), null);
                if (dt.Rows.Count > 0 && dtc.Rows.Count > 0)
                {
                    hfAdhar.Value = dt.Rows[0]["AdharStatus"].ToString();
                    hfPAN.Value = dt.Rows[0]["Status"].ToString();
                    hfDemate.Value = dt.Rows[0]["DemateStatus"].ToString();
                    hfBankdetails.Value = dtc.Rows[0]["BankStatus"].ToString();
                }
                if(hfAdhar.Value == "Approved" && hfPAN.Value =="Approved" && hfDemate.Value == "Approved" && hfDemate.Value == "Approved" && hfBankdetails.Value == "Approved")
                {
                    clears();
                    ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Investment data submit successfully', type: 'success',});", true);
                    return;
                }
                else
                {
                    Response.Redirect("IDProofDetails");
                }
            }
        }
        
    }

    private void BindRM()
    {
        DataTable dt = dl.get_RMAssign(null, null, GetUserLoggedIn(), null);
        if(dt.Rows.Count > 0)
        {
            rptRM.DataSource = dt;
            rptRM.DataBind();
        }

    }
    private void clears()
    {
        ddlInvestType.SelectedIndex = 0;
    }

    protected void lnkprint_Click(object sender, EventArgs e)
    {
        Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
    }

    protected void lnkSubmit2_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = false;
        pnllogindata2.Visible = true;
        if (hfOTP1.Value == (txtOTP1.Text))
        {
            DataTable dtUserDetails = dl.CheckMobileNumberExist(txtUserName1.Text);
            if (dtUserDetails != null && dtUserDetails.Rows.Count > 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Login Successfully..!!!', type: 'success',});", true);

                WriteCookie(dtUserDetails.Rows[0]["CustomerId"].ToString());
                UserDetails();
                lblCustomers.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                lblCustomerName.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                lblCustomer.Text = dtUserDetails.Rows[0]["CFullName"].ToString();
                pnlAllData.Visible = true;
                pnllogindata2.Visible = false;
                pnlDealConfirmation.Visible = true;

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Invalid Credential..!!!', type: 'error',});", true);
                return;
            }

        }
        else
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Please Enter Correct OTP', type: 'error',});", true);
        }
    }

    protected void lnkResend2_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = false;
        pnllogindata2.Visible = true;
        string otp = Generate_otp();
        string Mobile = null, Email = null;
        if (txtUserName1.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Mobile must be Added..!!!', type: 'error',});", true);
            return;
        }
        if(!IsValidMail(txtUserName1.Text))
        {
            Mobile = txtUserName1.Text;
        }
        else
        {
            Email = txtUserName1.Text;
        }
        DataTable dt = dl.CheckMobileNumberExist(txtUserName1.Text);
        if (dt.Rows.Count > 0)
        {
            if(Mobile !=null)
            {
                hfOTP1.Value = otp;
                new MSG91SMS().sendOTP("91" + txtUserName1.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your mobile no..!!!', type: 'success',});", true);
                votp1.Visible = true;
                txtUserName1.ReadOnly = true;
                lnkSubmit2.Visible = true;
                lnkGetOtp2.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
            else
            {
                hfOTP.Value = otp;
                sms.sendSignInOtp(txtUserName1.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your email..!!!', type: 'success',});", true);
                votp1.Visible = true;
                txtUserName1.ReadOnly = true;
                lnkSubmit2.Visible = true;
                lnkGetOtp2.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
        }
    }

    protected void lnkGetOtp2_Click(object sender, EventArgs e)
    {
        pnlAllData.Visible = false;
        pnlLoginData.Visible = false;
        pnllogindata2.Visible = true;
        string otp = Generate_otp();
        string Mobile = null, Email = null;
        if (txtUserName1.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Valid Mobile must be Added..!!!', type: 'error',});", true);
            return;
        }
        if(!IsValidMail(txtUserName1.Text))
        {
            Mobile = txtUserName1.Text;
        }
        else
        {
            Email = txtUserName1.Text;
        }
        DataTable dt = dl.CheckMobileNumberExist(txtUserName1.Text);
        if (dt.Rows.Count > 0)
        {
            if(Mobile !=null)
            {
                hfOTP1.Value = otp;
                new MSG91SMS().sendOTP("91" + txtUserName1.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your mobile no..!!!', type: 'success',});", true);
                votp1.Visible = true;
                txtUserName1.ReadOnly = true;
                lnkSubmit2.Visible = true;
                lnkGetOtp2.Visible = false;
                //pnlResend.Visible = true;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
            else
            {
                hfOTP.Value = otp;
                sms.sendSignInOtp(txtUserName1.Text, otp);
                ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'OTP sent to your email..!!!', type: 'success',});", true);
                votp1.Visible = true;
                txtUserName1.ReadOnly = true;
                lnkSubmit2.Visible = true;
                lnkGetOtp2.Visible = false;
                ScriptManager.RegisterStartupScript(Page, GetType(), "lnkresendotp", "<script>lnkresendotp()</script>", false);
            }
        }
        else
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Mobile number not registered..!!!', type: 'error',});", true);
            return;
        }
    }

    protected void txtQuantityValue_TextChanged(object sender, EventArgs e)
    {
        TextBox txtQuantityValue = sender as TextBox;
        RepeaterItem item = (RepeaterItem)txtQuantityValue.NamingContainer;
        TextBox txtFaceValueDealD = (TextBox)item.FindControl("txtFaceValueDealD");
        TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
        float facev = float.Parse(txtFaceValueBond.Text);
        float qty = float.Parse(txtQuantityValue.Text);
        txtFaceValueDealD.Text = (facev * qty).ToString("0.00");

        PaymentTypes();

        //   BindData();
        if (hfMaturityType.Value == "Bullet")
        {
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }

            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");


            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDealD.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");

            lblDealDate.Text = txtDealDate.Text;
            lblSattlementDate.Text = txtSattlementdate.Text;
            lblSecurity.Text = hfSecurity.Value;
            lblISINNumber.Text = txtISINNumber.Text;
            lblCouponRate.Text = txtCouponRate.Text;
            lblMaturityDate.Text = txtMaturityDate.Text;
            lblIPDate.Text = hfIPDate.Value;
            lblMaturitytype.Text = ddlPaymentType.Text;
            lblPutDate.Text = hfPutDate.Value;
            lblCallDate.Text = hfCallDate.Value;
            lblLastIPDate.Text = txtLastIP.Text;

            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            lblNoOfDays.Text = NDay.ToString();
            lblFacevaluebond.Text = txtFaceValueBond.Text;
            lblQuantity.Text = txtQuantity.Text;
            lblRate.Text = txtRate.Text;
            lblYTM.Text = txtYTM.Text;
            lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
            lblPrincipalAmount.Text = txtPrincipalAmount.Text;
            lblAccuredInterest.Text = txtAccured.Text;
            lblTotalConsideration.Text = txtGrossConder.Text;
            lblStampduty.Text = txtStampDuty.Text;
            lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
            int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, NDay.ToString(), txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
            if (IId != 0)
            {
                hfDealConfirmationId.Value = IId.ToString();
            }
        }

        if (hfMaturityType.Value == "Cumulative")
        {
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDealD.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            float total = float.Parse(txtConsiderationStamp.Text);
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            float TotalGrossAmount = FaceValue + total;
            hfTotalGrossAmount.Value = TotalGrossAmount.ToString();

            lblDealDate.Text = txtDealDate.Text;
            lblSattlementDate.Text = txtSattlementdate.Text;
            lblSecurity.Text = hfSecurity.Value;
            lblISINNumber.Text = txtISINNumber.Text;
            lblCouponRate.Text = txtCouponRate.Text;
            lblMaturityDate.Text = txtMaturityDate.Text;
            lblIPDate.Text = hfIPDate.Value;
            lblMaturitytype.Text = ddlPaymentType.Text;
            lblPutDate.Text = hfPutDate.Value;
            lblCallDate.Text = hfCallDate.Value;
            lblLastIPDate.Text = txtLastIP.Text;

            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            lblNoOfDays.Text = NDay.ToString();
            lblFacevaluebond.Text = txtFaceValueBond.Text;
            lblQuantity.Text = txtQuantity.Text;
            lblRate.Text = txtRate.Text;
            lblYTM.Text = txtYTM.Text;
            lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
            lblPrincipalAmount.Text = txtPrincipalAmount.Text;
            lblAccuredInterest.Text = txtAccured.Text;
            lblTotalConsideration.Text = txtGrossConder.Text;
            lblStampduty.Text = txtStampDuty.Text;
            lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
            int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, NDay.ToString(), txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
            if (IId != 0)
            {
                hfDealConfirmationId.Value = IId.ToString();
            }
        }

        if (hfMaturityType.Value == "Staggered")
        {
            if (GetUserLoggedIn() != null)
            {
                pnlDealConfirmation.Visible = true;
                lnkprint.Visible = true;
            }

            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
            HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
            HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
            HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
            TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
            TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
            TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDealD.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            float Deal = float.Parse(hfFacrValueForDeal.Value);
            float coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = coupon.ToString();
            DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            if (hfPaymentType.Value == "Monthly")
            {
                if (IPDate < Sattle)
                {
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                    TimeSpan FirstDay = (Salltle - InstallDate);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                        float percent = float.Parse(Percentage.ToString());

                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        float Principal = (FaceValue * percent / 100);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        float face = (Deal - (FaceValue * percent / 100));
                        hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();

                    }
                    else
                    {
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                    float Accured = float.Parse(txtAccured.Text);
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                    lblDealDate.Text = txtDealDate.Text;
                    lblSattlementDate.Text = txtSattlementdate.Text;
                    lblSecurity.Text = hfSecurity.Value;
                    lblISINNumber.Text = txtISINNumber.Text;
                    lblCouponRate.Text = txtCouponRate.Text;
                    lblMaturityDate.Text = txtMaturityDate.Text;
                    lblIPDate.Text = hfIPDate.Value;
                    lblMaturitytype.Text = ddlPaymentType.Text;
                    lblPutDate.Text = hfPutDate.Value;
                    lblCallDate.Text = hfCallDate.Value;
                    lblLastIPDate.Text = txtLastIP.Text;

                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                    lblFacevaluebond.Text = txtFaceValueBond.Text;
                    lblQuantity.Text = txtQuantity.Text;
                    lblRate.Text = txtRate.Text;
                    lblYTM.Text = txtYTM.Text;
                    lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
                    lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                    lblAccuredInterest.Text = txtAccured.Text;
                    lblTotalConsideration.Text = txtGrossConder.Text;
                    lblStampduty.Text = txtStampDuty.Text;
                    lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                    int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                    if (IId != 0)
                    {
                        hfDealConfirmationId.Value = IId.ToString();
                    }
                }

            }

            if (hfPaymentType.Value == "Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dt.Rows.Count > 0)
                {
                    string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                    float Percent = float.Parse(Percentage);
                    float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                    float Principal = (FaceValue * Percent / 100);
                    hfFirstYearly.Value = FirstYear.ToString();
                    DateTime lastDate = InstallDate;
                    float face = (FaceValue - (FaceValue * Percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();

                }
                else
                {

                    float FirstYear = ((Deal * coupon * fday) / 36500);
                    hfFirstYearly.Value = FirstYear.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = txtYTM.Text;
                lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

            if (hfPaymentType.Value == "Quarterly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float Principal = (FaceValue * percent / 100);
                    float face = (Deal - (FaceValue * percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                else
                {
                    float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                float Accured = float.Parse(txtAccured.Text);
                hfTotalAssuredInterest.Value = txtAccured.Text;
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                float GrossCo = float.Parse(txtGrossConder.Text);
                hfGrossConsideration.Value = txtGrossConder.Text;
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = txtYTM.Text;
                lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

            if (hfPaymentType.Value == "Half Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (Salltle - InstallDate);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDate.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    float Principal = (FaceValue * percent / 100);
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float face = (Deal - (FaceValue * percent / 100));
                    float per = percent;
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();
                }
                else
                {
                    float FirstHalfY = ((Deal * coupon * fday) / 36500);
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfTotalFullInt.Value = intfirst.ToString();
                    lblNoOfDays.Text = fday.ToString();

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                if (txtAccured.Text == null || txtAccured.Text == "")
                {

                }
                else
                {
                    float Accured = float.Parse(txtAccured.Text);

                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    float stamp = float.Parse(txtStampDuty.Text);
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
                lblDealDate.Text = txtDealDate.Text;
                lblSattlementDate.Text = txtSattlementdate.Text;
                lblSecurity.Text = hfSecurity.Value;
                lblISINNumber.Text = txtISINNumber.Text;
                lblCouponRate.Text = txtCouponRate.Text;
                lblMaturityDate.Text = txtMaturityDate.Text;
                lblIPDate.Text = hfIPDate.Value;
                lblMaturitytype.Text = ddlPaymentType.Text;
                lblPutDate.Text = hfPutDate.Value;
                lblCallDate.Text = hfCallDate.Value;
                lblLastIPDate.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                lblFacevaluebond.Text = txtFaceValueBond.Text;
                lblQuantity.Text = txtQuantity.Text;
                lblRate.Text = txtRate.Text;
                lblYTM.Text = txtYTM.Text;
                lblFaceValueofdeal.Text = txtFaceValueDealD.Text;
                lblPrincipalAmount.Text = txtPrincipalAmount.Text;
                lblAccuredInterest.Text = txtAccured.Text;
                lblTotalConsideration.Text = txtGrossConder.Text;
                lblStampduty.Text = txtStampDuty.Text;
                lblConsiderationwithduty.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSattlementdate.Text, lblNoOfDays.Text, txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                }
            }

        }

    }

    protected void txtQuantity_TextChanged(object sender, EventArgs e)
    {
        TextBox txtQuantity = sender as TextBox;
        RepeaterItem item = (RepeaterItem)txtQuantity.NamingContainer;
        TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");
        TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
        float facev = float.Parse(txtFaceValueBond.Text);
        float qty = float.Parse(txtQuantity.Text);
        txtFaceValueDeal.Text = (facev * qty).ToString("0.00");

        PaymentType();

        //   BindData();
        if (hfMaturityType.Value == "Bullet")
        {
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            lblYield.Text = hfYieldValue.Value;
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            lblPrice.Text = Rate.ToString();
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
        }

        if (hfMaturityType.Value == "Cumulative")
        {

            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            float Principle = float.Parse(txtPrincipalAmount.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = Coupon.ToString();
            int NDay = 0;
            try
            {
                NDay = int.Parse(hfDayValue.Value);
            }
            catch (Exception ex) { }
            float Numbers = NDay;
            txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            hfTotalAssuredInterest.Value = txtAccured.Text;
            float Accured = float.Parse(txtAccured.Text);
            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            hfGrossConsideration.Value = txtGrossConder.Text;
            float GrossCo = float.Parse(txtGrossConder.Text);
            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            hfQuantity.Value = txtQuantity.Text;
            float StampDuty = float.Parse(txtStampDuty.Text);
            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            float total = float.Parse(txtConsiderationStamp.Text);
            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            float TotalGrossAmount = FaceValue + total;
            hfTotalGrossAmount.Value = TotalGrossAmount.ToString();
        }

        if (hfMaturityType.Value == "Staggered")
        {

            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            lblYield.Text = hfYieldValue.Value;
            float Rate = float.Parse(txtRate.Text);
            hfRatePrice.Value = Rate.ToString("0.00");
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            hfFacrValueForDeal.Value = FaceValue.ToString();
            float Deal = float.Parse(hfFacrValueForDeal.Value);
            float coupon = float.Parse(txtCouponRate.Text);
            hfCouponRate.Value = coupon.ToString();
            DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            if (hfPaymentType.Value == "Monthly")
            {
                if (IPDate < Sattle)
                {
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                    TimeSpan FirstDay = (InstallDate - Salltle);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                        float percent = float.Parse(Percentage.ToString());

                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        float Principal = (FaceValue * percent / 100);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        float face = (Deal - (FaceValue * percent / 100));
                        hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        float per = percent;
                        hfPercentFirst.Value = per.ToString();
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        float interest = 0;
                        float Pers = 0;
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                //float fas = float.Parse(hfFaceee.Value);
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {
                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = ((FaceValue * perce / 100));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    lastDate = InsDate;
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    float total = (interest + ((face * coupon * days) / 36500));
                                    face = Faces;
                                    interest = total;
                                    hfTotalInt.Value = interest.ToString();
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {

                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float monthlyinterest = (((face * coupon * days) / 36500));
                                hfMonthlyInterest.Value = monthlyinterest.ToString();
                                lastDate = InsDate;
                                float total = (interest + (face * coupon * days) / 36500);
                                interest = total;
                                hfTotalInt.Value = interest.ToString();

                            }

                        }

                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float intLast = float.Parse(hfTotalInt.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);

                        if (dtn.Rows.Count > 0)
                        {

                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotapercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotapercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = (FaceValue * Percs / 100);
                                hfLastMonthly.Value = LastMonth.ToString();
                                float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                                hfTotalFullInt.Value = LastInterest.ToString();
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastMonthInt = float.Parse(hfRemainingDay.Value);
                            float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                            hfLastMonthly.Value = LastMonth.ToString();
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        float interest = 0;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    lastDate = InsDate;
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    float total = (interest + ((Deal * coupon * days) / 36500));
                                    Deal = Faces;
                                    interest = total;
                                    hfTotalInt.Value = interest.ToString();
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {

                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float monthlyinterest = (((Deal * coupon * days) / 36500));
                                hfMonthlyInterest.Value = monthlyinterest.ToString();
                                lastDate = InsDate;
                                float total = (interest + (Deal * coupon * days) / 36500);
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                            }

                        }

                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float intLast = float.Parse(hfTotalInt.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotapercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotapercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = (FaceValue * Percs / 100);
                                hfLastMonthly.Value = LastMonth.ToString();
                                float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                                hfTotalFullInt.Value = LastInterest.ToString();
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastMonthInt = float.Parse(hfRemainingDay.Value);
                            float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                            hfLastMonthly.Value = LastMonth.ToString();
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                    float Accured = float.Parse(txtAccured.Text);
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
            }

            if (hfPaymentType.Value == "Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dt.Rows.Count > 0)
                {
                    string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                    float Percent = float.Parse(Percentage);
                    float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                    float Principal = (FaceValue * Percent / 100);
                    hfFirstYearly.Value = FirstYear.ToString();
                    DateTime lastDate = InstallDate;
                    float face = (FaceValue - (FaceValue * Percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    hfIntFirst.Value = intfirst.ToString();
                    float per = Percent;
                    float Pers = 0;
                    float interest = 0;
                    int UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {

                        DateTime InsDate = InstallDate.AddMonths(i * 12);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {

                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                float principal = (FaceValue * perce / 100);
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                interest = total;
                                face = Faces;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {

                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((face * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }

                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float facelast = float.Parse(hfFaces.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    if (dtn.Rows.Count > 0)
                    {

                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();

                    }

                }
                else
                {

                    float FirstYear = ((Deal * coupon * fday) / 36500);
                    hfFirstYearly.Value = FirstYear.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    DateTime lastDate = InstallDate;
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 12);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();

                        }


                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float facelast = float.Parse(hfFaces.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }

                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();

                    }

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            }

            if (hfPaymentType.Value == "Quarterly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float Principal = (FaceValue * percent / 100);
                    float face = (Deal - (FaceValue * percent / 100));
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float interest = 0;
                    float per = percent;
                    float Pers = 0;
                    DateTime lastDate = InstallDate;
                    int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 3);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                face = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((face * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    float intLast = float.Parse(hfTotalInt.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                else
                {
                    float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                    hfFirstQuarterly.Value = FirstQuarterly.ToString();
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    DateTime lastDate = InstallDate;
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 3);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }

                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }
                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                float Accured = float.Parse(txtAccured.Text);
                hfTotalAssuredInterest.Value = txtAccured.Text;
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                float GrossCo = float.Parse(txtGrossConder.Text);
                hfGrossConsideration.Value = txtGrossConder.Text;
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            }

            if (hfPaymentType.Value == "Half Yearly")
            {
                DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan FirstDay = (InstallDate - Salltle);
                float fday = (float)FirstDay.TotalDays;
                DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                if (dtc.Rows.Count > 0)
                {
                    string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                    float percent = float.Parse(Percentage.ToString());
                    float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    float Principal = (FaceValue * percent / 100);
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float face = (Deal - (FaceValue * percent / 100));
                    float per = percent;
                    float Pers = 0;
                    float interest = 0;
                    int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 6);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                float principal = (FaceValue * perce / 100);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (face - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((face * coupon * days) / 36500));
                                face = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }

                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((face * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((face * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {

                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (per + lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                else
                {
                    float FirstHalfY = ((Deal * coupon * fday) / 36500);
                    hfFirstHalf.Value = FirstHalfY.ToString();
                    DateTime lastDate = InstallDate;
                    float intfirst = ((Deal * coupon * fday) / 36500);
                    float interest = 0;
                    float Pers = 0;
                    int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                    for (int i = 1; i < UnitCount + 1; i++)
                    {
                        DateTime InsDate = InstallDate.AddMonths(i * 6);
                        DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                        if (dtm.Rows.Count > 0)
                        {
                            string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float perce = float.Parse(Perc);
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                float principal = (FaceValue * perce / 100);
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                float Faces = (Deal - (FaceValue * perce / 100));
                                hfFaces.Value = Faces.ToString();
                                float total = (interest + ((Deal * coupon * days) / 36500));
                                Deal = Faces;
                                interest = total;
                                hfTotalInt.Value = interest.ToString();
                                float totalpercent = (Pers + perce);
                                Pers = totalpercent;
                                hfTotalPercent.Value = totalpercent.ToString();
                            }
                        }
                        else
                        {
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            float total = (interest + ((Deal * coupon * days) / 36500));
                            interest = total;
                            hfTotalInt.Value = interest.ToString();
                        }

                    }
                    DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan objtime = (Maturity - Last);
                    float dayss = (float)objtime.TotalDays;
                    DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                    float intLast = float.Parse(hfTotalInt.Value);
                    float facelast = float.Parse(hfFaces.Value);
                    float lastpercent = float.Parse(hfTotalPercent.Value);
                    if (dtn.Rows.Count > 0)
                    {
                        string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                        if (Perc == null || Perc == "")
                        {
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                        else
                        {
                            float Percs = float.Parse(Perc);
                            float Fulltotapercent = (lastpercent + Percs);
                            float remainingpercent = (100 - Fulltotapercent);
                            float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * Percs / 100);
                            float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                            hfTotalFullInt.Value = LastInterest.ToString();
                        }
                    }
                    else
                    {
                        float remainingpercent = (100 - lastpercent);
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                        float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
                        hfTotalFullInt.Value = LastInterest.ToString();
                    }

                }
                txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                if (txtAccured.Text == null || txtAccured.Text == "")
                {

                }
                else
                {
                    float Accured = float.Parse(txtAccured.Text);

                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    float stamp = float.Parse(txtStampDuty.Text);
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                }
            }

        }
        if (GetUserLoggedIn() != null)
        {
            pnlViewSheet.Visible = true;
            pnlLoginToView.Visible = false;
        }
        else
        {
            pnlViewSheet.Visible = false;
            pnlLoginToView.Visible = true;
        }

    }

    protected void btnInvestNow_Click(object sender, EventArgs e)
    {
        pnlViewDealCalculation.Visible = false;
        if (txtSDate.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Sattlement Date Must Be Enter', type: 'error',});", true);
            return;
        }
        if (txtQty.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Quantity Must Be Enter', type: 'error',});", true);
            return;
        }
        if (GetUserLoggedIn() == null)
        {
            pnlAllData.Visible = false;
            pnllogindata2.Visible = true;
        }

        foreach (RepeaterItem item in rptDeal.Items)
        {

            string txtSattlementdate = txtSDate.Text;
            TextBox txtYTM = item.FindControl("txtYTM") as TextBox;
            hfSattlementDateforbond.Value = txtSDate.Text;
            getYieldWithXIRRForDeal();
            txtYTM.Text = hfYieldValue.Value;
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            DateTime Sattles = DateTime.ParseExact(txtSDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime IPDat = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime IPDate = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(txtSDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            hfSattlementDate.Value = txtSDate.Text;
            hfIPDate.Value = txtLastIP.Text;

            DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

            if (ddlPaymentType.Text == "Monthly")
            {
                TimeSpan objFirstInt = Sattle - IPDate;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();
                hfDayValue.Value = FirstDay.ToString();
                DateTime compareTo = IPDate;
                DateTime now = Sattle;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();


            }
            if (ddlPaymentType.Text == "Yearly")
            {
                TimeSpan objFirstInt = Sattle - IPDate;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();
                hfDayValue.Value = FirstDay.ToString();
                DateTime compareTo = IPDate;
                DateTime now = Sattle;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();



            }

            if (ddlPaymentType.Text == "Quarterly")
            {
                TimeSpan objFirstInt = Sattle - IPDate;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();
                hfDayValue.Value = FirstDay.ToString();
                DateTime compareTo = IPDate;
                DateTime now = Sattle;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();

            }

            if (ddlPaymentType.Text == "Half Yearly")
            {
                TimeSpan objFirstInt = Sattle - IPDate;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();
                hfDayValue.Value = FirstDay.ToString();
                DateTime compareTo = IPDate;
                DateTime now = Sattle;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();

            }

            if (ddlPaymentType.Text == "One Time Interest")
            {
                TimeSpan objFirstInt = Sattle - IPDate;
                float FirstDay = (float)objFirstInt.TotalDays;
                hfFirstIntDay.Value = FirstDay.ToString();
                hfDayValue.Value = FirstDay.ToString();
                DateTime compareTo = IPDate;
                DateTime now = Sattle;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();

            }

            string txtQuantityValue = txtQty.Text;

            // RepeaterItem item = (RepeaterItem)txtQuantityValue.NamingContainer;
            TextBox txtFaceValueDealD = (TextBox)item.FindControl("txtFaceValueDealD");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            float facev = float.Parse(txtFaceValueBond.Text);
            float qty = float.Parse(txtQty.Text);
            txtFaceValueDealD.Text = (facev * qty).ToString("0.00");

            PaymentTypes();

            //   BindData();
            if (hfMaturityType.Value == "Bullet")
            {
                if (GetUserLoggedIn() != null)
                {
                    pnlDealConfirmation.Visible = true;
                    lnkprint.Visible = true;
                }

                TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
                HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
                //HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
                HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
                HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
                TextBox txtRate = (TextBox)item.FindControl("txtRate");
                TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
                // TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
                TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
                TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
                TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
                TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
                TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
                //  TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
                TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
                TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
                TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
                 TextBox CouponRate = (TextBox)item.FindControl("txtCouponRate");
                // TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
                //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");
                txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "");

                float Rate = float.Parse(txtRate.Text);
                hfRatePrice.Value = Rate.ToString("0.00");
                float FacevalueBond = float.Parse(txtFaceValueBond.Text);
                float FaceValue = float.Parse(txtFaceValueDealD.Text);
                hfFacrValueForDeal.Value = FaceValue.ToString();
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                float Principle = float.Parse(txtPrincipalAmount.Text);
                float Coupon = float.Parse(txtCouponRate.Text);
                hfCouponRate.Value = Coupon.ToString();
                DateTime maturity = DateTime.ParseExact(txtMaturityDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                TimeSpan objFirstInts = maturity - Sattles;
                float TND = (float)objFirstInts.TotalDays;
                int NDay = 0;
                try
                {
                    NDay = int.Parse(hfDayValue.Value);
                }
                catch (Exception ex) { }
                float Numbers = NDay;
                txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * TND / 36500).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * TND / 36500)).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                float StampDuty = float.Parse(txtStampDuty.Text);
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");

                lblDealDates.Text = txtDealDate.Text;
                lblSattlementDates.Text = txtSDate.Text;
                lblSecuritys.Text = hfSecurity.Value;
                lblISINNumbers.Text = txtISINNumber.Text;
                lblCouponRatess.Text = txtCouponRate.Text;
                lblMaturityDates.Text = txtMaturityDate.Text;
                lblIPDates.Text = hfIPDate.Value;
                lblMaturitytypes.Text = ddlPaymentType.Text;
                lblPutDates.Text = hfPutDate.Value;
                lblCallDates.Text = hfCallDate.Value;
                lblLastIPDates.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                lblNoOfDayss.Text = TND.ToString();
                lblFacevaluebonds.Text = txtFaceValueBond.Text;
                lblQuantitys.Text = txtQuantity.Text;
                lblRates.Text = txtRate.Text;
                lblYTMs.Text = txtYTM.Text;
                lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                lblAccuredInterests.Text = txtAccured.Text;
                lblTotalConsiderations.Text = txtGrossConder.Text;
                lblStampdutys.Text = txtStampDuty.Text;
                lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, TND.ToString(), txtQty.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                    //Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
                }
            }

            if (hfMaturityType.Value == "Cumulative")
            {
                if (GetUserLoggedIn() != null)
                {
                    pnlDealConfirmation.Visible = true;
                    lnkprint.Visible = true;
                }
                TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
                HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
                //HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
                HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
                HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
                TextBox txtRate = (TextBox)item.FindControl("txtRate");
                TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
                //TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
                TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
                TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
                TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
                TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
                TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
                //  TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
                TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
                TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
                TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
                //TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
                // TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
                //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");
                txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                float Rate = float.Parse(txtRate.Text);
                hfRatePrice.Value = Rate.ToString("0.00");
                float FacevalueBond = float.Parse(txtFaceValueBond.Text);
                float FaceValue = float.Parse(txtFaceValueDealD.Text);
                hfFacrValueForDeal.Value = FaceValue.ToString();
                txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                float Principle = float.Parse(txtPrincipalAmount.Text);
                float Coupon = float.Parse(txtCouponRate.Text);
                hfCouponRate.Value = Coupon.ToString();
                int NDay = 0;
                try
                {
                    NDay = int.Parse(hfDayValue.Value);
                }
                catch (Exception ex) { }
                float Numbers = NDay;
                txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
                hfTotalAssuredInterest.Value = txtAccured.Text;
                float Accured = float.Parse(txtAccured.Text);
                txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
                hfGrossConsideration.Value = txtGrossConder.Text;
                float GrossCo = float.Parse(txtGrossConder.Text);
                txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                hfQuantity.Value = txtQuantity.Text;
                float StampDuty = float.Parse(txtStampDuty.Text);
                txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                float total = float.Parse(txtConsiderationStamp.Text);
                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                float TotalGrossAmount = FaceValue + total;
                hfTotalGrossAmount.Value = TotalGrossAmount.ToString();

                lblDealDates.Text = txtDealDate.Text;
                lblSattlementDates.Text = txtSDate.Text;
                lblSecuritys.Text = hfSecurity.Value;
                lblISINNumbers.Text = txtISINNumber.Text;
                lblCouponRatess.Text = txtCouponRate.Text;
                lblMaturityDates.Text = txtMaturityDate.Text;
                lblIPDates.Text = hfIPDate.Value;
                lblMaturitytypes.Text = ddlPaymentType.Text;
                lblPutDates.Text = hfPutDate.Value;
                lblCallDates.Text = hfCallDate.Value;
                lblLastIPDates.Text = txtLastIP.Text;

                hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                lblNoOfDayss.Text = NDay.ToString();
                lblFacevaluebonds.Text = txtFaceValueBond.Text;
                lblQuantitys.Text = txtQuantity.Text;
                lblRates.Text = txtRate.Text;
                lblYTMs.Text = txtYTM.Text;
                lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                lblAccuredInterests.Text = txtAccured.Text;
                lblTotalConsiderations.Text = txtGrossConder.Text;
                lblStampdutys.Text = txtStampDuty.Text;
                lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, NDay.ToString(), txtQuantity.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                if (IId != 0)
                {
                    hfDealConfirmationId.Value = IId.ToString();
                    //Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
                }
            }

            if (hfMaturityType.Value == "Staggered")
            {
                if (GetUserLoggedIn() != null)
                {
                    pnlDealConfirmation.Visible = true;
                    lnkprint.Visible = true;
                }

                TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
                HiddenField hfSecurity = (HiddenField)item.FindControl("hfSecurity");
                //HiddenField hfIPDate = (HiddenField)item.FindControl("hfIPDate");
                HiddenField hfPutDate = (HiddenField)item.FindControl("hfPutDate");
                HiddenField hfCallDate = (HiddenField)item.FindControl("hfCallDate");
                TextBox txtRate = (TextBox)item.FindControl("txtRate");
                TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
                // TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
                TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
                TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
                TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
                TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
                TextBox txtQuantity = (TextBox)item.FindControl("txtQuantityValue");
                // TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdateD");
                TextBox txtDealDate = (TextBox)item.FindControl("txtDealDate");
                TextBox txtISINNumber = (TextBox)item.FindControl("txtISINNumber");
                TextBox txtMaturityDate = (TextBox)item.FindControl("txtMaturityDate");
                DateTime maturity = DateTime.ParseExact(txtMaturityDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                // TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
                // TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
                TimeSpan objFirstInts = maturity - Sattles;
                float TND = (float)objFirstInts.TotalDays;
                float Rate = float.Parse(txtRate.Text);
                hfRatePrice.Value = Rate.ToString("0.00");
                float FacevalueBond = float.Parse(txtFaceValueBond.Text);
                float FaceValue = float.Parse(txtFaceValueDealD.Text);
                hfFacrValueForDeal.Value = FaceValue.ToString();
                float Deal = float.Parse(hfFacrValueForDeal.Value);
                float coupon = float.Parse(txtCouponRate.Text);
                hfCouponRate.Value = coupon.ToString();
                //  DateTime IPDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                //  DateTime Sattle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate < Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                        TimeSpan FirstDay = (Salltle - InstallDate);
                        DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                        if (dtc.Rows.Count > 0)
                        {
                            string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                            float percent = float.Parse(Percentage.ToString());

                            float fday = (float)objFirstInts.TotalDays;
                            float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                            float Principal = (FaceValue * percent / 100);
                            hfFirstMonthly.Value = FirstMonth.ToString();
                            float face = (Deal - (FaceValue * percent / 100));
                            hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            DateTime lastDate = InstallDate;
                            float intfirst = ((Deal * coupon * fday) / 36500);
                            hfIntFirst.Value = intfirst.ToString();
                            lblNoOfDays.Text = fday.ToString();

                        }
                        else
                        {
                            float fday = (float)FirstDay.TotalDays;
                            float FirstMonth = ((Deal * coupon * fday) / 36500);
                            hfFirstMonthly.Value = FirstMonth.ToString();
                            DateTime lastDate = InstallDate;
                            float intfirst = ((Deal * coupon * fday) / 36500);
                            hfIntFirst.Value = intfirst.ToString();
                            lblNoOfDays.Text = fday.ToString();
                        }
                        txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                        hfQuantity.Value = txtQuantity.Text;
                        txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                        hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                        txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                        float Accured = float.Parse(txtAccured.Text);
                        hfTotalAssuredInterest.Value = txtAccured.Text;
                        txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                        float GrossCo = float.Parse(txtGrossConder.Text);
                        hfGrossConsideration.Value = txtGrossConder.Text;
                        txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                        txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                        hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                        txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                        lblDealDates.Text = txtDealDate.Text;
                        lblSattlementDates.Text = txtSDate.Text;
                        lblSecuritys.Text = hfSecurity.Value;
                        lblISINNumbers.Text = txtISINNumber.Text;
                        lblCouponRatess.Text = txtCouponRate.Text;
                        lblMaturityDates.Text = txtMaturityDate.Text;
                        lblIPDates.Text = hfIPDate.Value;
                        lblMaturitytypes.Text = ddlPaymentType.Text;
                        lblPutDates.Text = hfPutDate.Value;
                        lblCallDates.Text = hfCallDate.Value;
                        lblLastIPDates.Text = txtLastIP.Text;

                        hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                        lblNoOfDayss.Text = TND.ToString();
                        lblFacevaluebonds.Text = txtFaceValueBond.Text;
                        lblQuantitys.Text = txtQuantity.Text;
                        lblRates.Text = txtRate.Text;
                        lblYTMs.Text = txtYTM.Text;
                        lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                        lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                        lblAccuredInterests.Text = txtAccured.Text;
                        lblTotalConsiderations.Text = txtGrossConder.Text;
                        lblStampdutys.Text = txtStampDuty.Text;
                        lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                        txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                        int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, lblNoOfDayss.Text, txtQty.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                        if (IId != 0)
                        {
                            hfDealConfirmationId.Value = IId.ToString();
                           // Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
                        }
                    }

                }

                if (hfPaymentType.Value == "Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)objFirstInts.TotalDays;
                    DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dt.Rows.Count > 0)
                    {
                        string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float Percent = float.Parse(Percentage);
                        float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                        float Principal = (FaceValue * Percent / 100);
                        hfFirstYearly.Value = FirstYear.ToString();
                        DateTime lastDate = InstallDate;
                        float face = (FaceValue - (FaceValue * Percent / 100));
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();

                    }
                    else
                    {

                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfIntFirst.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfIntFirst.Value).ToString("0.00");
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    float Accured = float.Parse(txtAccured.Text);
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                    lblDealDates.Text = txtDealDate.Text;
                    lblSattlementDates.Text = txtSDate.Text;
                    lblSecuritys.Text = hfSecurity.Value;
                    lblISINNumbers.Text = txtISINNumber.Text;
                    lblCouponRatess.Text = txtCouponRate.Text;
                    lblMaturityDates.Text = txtMaturityDate.Text;
                    lblIPDates.Text = hfIPDate.Value;
                    lblMaturitytypes.Text = ddlPaymentType.Text;
                    lblPutDates.Text = hfPutDate.Value;
                    lblCallDates.Text = hfCallDate.Value;
                    lblLastIPDates.Text = txtLastIP.Text;

                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                    lblNoOfDayss.Text = TND.ToString();
                    // lblNoOfDayss.Text = NDay.ToString();
                    lblFacevaluebonds.Text = txtFaceValueBond.Text;
                    lblQuantitys.Text = txtQuantity.Text;
                    lblRates.Text = txtRate.Text;
                    lblYTMs.Text = txtYTM.Text;
                    lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                    lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                    lblAccuredInterests.Text = txtAccured.Text;
                    lblTotalConsiderations.Text = txtGrossConder.Text;
                    lblStampdutys.Text = txtStampDuty.Text;
                    lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                    int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, lblNoOfDayss.Text, txtQty.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                    if (IId != 0)
                    {
                        hfDealConfirmationId.Value = IId.ToString();
                       // Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
                    }
                }

                if (hfPaymentType.Value == "Quarterly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)FirstDay.TotalDays;
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float Principal = (FaceValue * percent / 100);
                        float face = (Deal - (FaceValue * percent / 100));
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfTotalFullInt.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    else
                    {
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfTotalFullInt.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                    float Accured = float.Parse(txtAccured.Text);
                    hfTotalAssuredInterest.Value = txtAccured.Text;
                    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                    float GrossCo = float.Parse(txtGrossConder.Text);
                    hfGrossConsideration.Value = txtGrossConder.Text;
                    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");

                    lblDealDates.Text = txtDealDate.Text;
                    lblSattlementDates.Text = txtSDate.Text;
                    lblSecuritys.Text = hfSecurity.Value;
                    lblISINNumbers.Text = txtISINNumber.Text;
                    lblCouponRatess.Text = txtCouponRate.Text;
                    lblMaturityDates.Text = txtMaturityDate.Text;
                    lblIPDates.Text = hfIPDate.Value;
                    lblMaturitytypes.Text = ddlPaymentType.Text;
                    lblPutDates.Text = hfPutDate.Value;
                    lblCallDates.Text = hfCallDate.Value;
                    lblLastIPDates.Text = txtLastIP.Text;

                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                    lblNoOfDayss.Text = TND.ToString();
                    //lblNoOfDayss.Text = NDay.ToString();
                    lblFacevaluebonds.Text = txtFaceValueBond.Text;
                    lblQuantitys.Text = txtQuantity.Text;
                    lblRates.Text = txtRate.Text;
                    lblYTMs.Text = txtYTM.Text;
                    lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                    lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                    lblAccuredInterests.Text = txtAccured.Text;
                    lblTotalConsiderations.Text = txtGrossConder.Text;
                    lblStampdutys.Text = txtStampDuty.Text;
                    lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                    int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, lblNoOfDayss.Text, txtQty.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                    if (IId != 0)
                    {
                        hfDealConfirmationId.Value = IId.ToString();
                       // Response.Write("<script>window.open('PrintDealConfirmation?oId=" + hfDealConfirmationId.Value+"','_blank')</script>");
                        //Response.Write("<script>window.open('PrintDealConfirmation?oId="+ hfDealConfirmationId.Value + "','_blank')</script>");
                       // Response.Redirect("PrintDealConfirmation?oId=" + hfDealConfirmationId.Value);
                    }
                }

                if (hfPaymentType.Value == "Half Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (Salltle - InstallDate);
                    float fday = (float)FirstDay.TotalDays;
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDate.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        float Principal = (FaceValue * percent / 100);
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        float face = (Deal - (FaceValue * percent / 100));
                        float per = percent;
                        hfTotalFullInt.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();
                    }
                    else
                    {
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        DateTime lastDate = InstallDate;
                        float intfirst = ((Deal * coupon * fday) / 36500);
                        hfTotalFullInt.Value = intfirst.ToString();
                        lblNoOfDays.Text = fday.ToString();

                    }
                    txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
                    hfQuantity.Value = txtQuantity.Text;
                    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
                    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
                    txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
                    if (txtAccured.Text == null || txtAccured.Text == "")
                    {

                    }
                    else
                    {
                        float Accured = float.Parse(txtAccured.Text);

                        hfTotalAssuredInterest.Value = txtAccured.Text;
                        txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
                        float GrossCo = float.Parse(txtGrossConder.Text);
                        hfGrossConsideration.Value = txtGrossConder.Text;
                        txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
                        float stamp = float.Parse(txtStampDuty.Text);
                        txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
                        hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                    }

                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                    lblDealDates.Text = txtDealDate.Text;
                    lblSattlementDates.Text = txtSDate.Text;
                    lblSecuritys.Text = hfSecurity.Value;
                    lblISINNumbers.Text = txtISINNumber.Text;
                    lblCouponRatess.Text = txtCouponRate.Text;
                    lblMaturityDates.Text = txtMaturityDate.Text;
                    lblIPDates.Text = hfIPDate.Value;
                    lblMaturitytypes.Text = ddlPaymentType.Text;
                    lblPutDates.Text = hfPutDate.Value;
                    lblCallDates.Text = hfCallDate.Value;
                    lblLastIPDates.Text = txtLastIP.Text;

                    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
                   // lblNoOfDayss.Text = NDay.ToString();
                    lblFacevaluebonds.Text = txtFaceValueBond.Text;
                    lblQuantitys.Text = txtQuantity.Text;
                    lblRates.Text = txtRate.Text;
                    lblYTMs.Text = txtYTM.Text;
                    lblFaceValueofdeals.Text = txtFaceValueDealD.Text;
                    lblPrincipalAmounts.Text = txtPrincipalAmount.Text;
                    lblAccuredInterests.Text = txtAccured.Text;
                    lblTotalConsiderations.Text = txtGrossConder.Text;
                    lblStampdutys.Text = txtStampDuty.Text;
                    lblConsiderationwithdutys.Text = txtConsiderationStamp.Text;
                    txtDealDate.Text = DateTime.Now.ToString("dd/MM/yyyy").Replace("-", "/");
                    int IId = dl.add_DealConfirmation(null, Request.QueryString["oId"].ToString(), txtRate.Text, txtDealDate.Text, txtSDate.Text, lblNoOfDayss.Text, txtQty.Text, txtPrincipalAmount.Text, txtAccured.Text, txtStampDuty.Text, txtConsiderationStamp.Text, txtFaceValueDealD.Text, txtLastIP.Text, txtGrossConder.Text, GetUserLoggedIn());
                    if (IId != 0)
                    {
                        hfDealConfirmationId.Value = IId.ToString();
                        //Response.Redirect("PrintDealConfirmation?oId="  + hfDealConfirmationId.Value + "_blank");
                    }
                }
            }
        }
        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "c", "ClosePopup();", true);
        ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Deal Confirmation Generated Plz Scroll.!!!', type: 'success',});", true);
        pnlViewDealCalculation.Visible = true;
    }

    protected void btnInterestSheet_Click(object sender, EventArgs e)
    {
        pnlViewInterestSheet.Visible = false;

        if (txtSDate.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Sattlement Date Must Be Enter', type: 'error',});", true);
            return;
        }
        if (txtQty.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Quantity Must Be Enter', type: 'error',});", true);
            return;
        }


        foreach (RepeaterItem item in rptBondCalculator.Items)
        {

            hfSattlementDateforbond.Value = txtSDate.Text;
            getYieldWithXIRRForInvestment();
            TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtYTM = (TextBox)item.FindControl("txtYTM");
            txtYTM.Text = hfYieldValue.Value;
            TextBox ddlPaymentType = (TextBox)item.FindControl("ddlPaymentType");
            DateTime Sattles = DateTime.ParseExact(txtSDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime IPDat = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime IPDate = DateTime.ParseExact(txtLastIP.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            DateTime Sattle = DateTime.ParseExact(txtSDate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            hfSattlementDate.Value = txtSDate.Text;
            hfIPDate.Value = txtLastIP.Text;
            lblLastIP.Text = txtLastIP.Text;
            DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

            if (ddlPaymentType.Text == "Monthly")
            {
                if (IPDate > Sattle)
                {

                    TimeSpan objFirstInt = IPDate - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDate;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDate;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();


                }
                else
                {
                    if (hfEOM.Value == "1")
                    {
                        DataTable dt = dl.get_LastMonthlyDate(Sattles, IPDat);
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;

                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                    else
                    {
                        DataTable dt = dl.get_MonthlyDate(Sattles, IPDat);
                        string Date = dt.Rows[0]["mth_start"].ToString();
                        hfQuar.Value = Date;

                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                }
            }
            if (ddlPaymentType.Text == "Yearly")
            {
                if (IPDate > Sattle)
                {

                    TimeSpan objFirstInt = IPDate - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDate;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDate;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();


                }
                else
                {
                    if (hfEOM.Value == "1")
                    {
                        DataTable dt = dl.get_YearlyDate(Sattle, IPDate);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;
                        }


                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }
                    else
                    {
                        DataTable dt = dl.get_YearlyDatesss(Sattle, IPDate);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;
                        }
                        DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                        TimeSpan objFirstInt = IPDates - Sattle;
                        float FirstDay = (float)objFirstInt.TotalDays;
                        hfFirstIntDay.Value = FirstDay.ToString();

                        TimeSpan objSecondInt = Maturity - IPDates;
                        float SecondDay = (float)objSecondInt.TotalDays;
                        hfSecondIntDay.Value = SecondDay.ToString();
                        float day = FirstDay + SecondDay;
                        hfDayValue.Value = day.ToString();

                        DateTime compareTo = IPDates;
                        DateTime now = Maturity;
                        var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                        var TotalYear = dateSpan.Years;
                        hfTotalYear.Value = TotalYear.ToString();
                        var TotalMonth = dateSpan.Months;
                        hfTotalMonth.Value = TotalMonth.ToString();
                        var TotalDay = dateSpan.Days;
                        hfTotalDay.Value = TotalDay.ToString();
                    }

                }
            }

            if (ddlPaymentType.Text == "Quarterly")
            {
                if (IPDate > Sattle)
                {

                    TimeSpan objFirstInt = IPDate - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDate;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDate;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();


                }
                else
                {
                    if (hfEOM.Value == "1")
                    {
                        DataTable dt = dl.get_LastQuarterlyDate(Sattles, IPDat);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;


                            DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                            TimeSpan objFirstInt = IPDates - Sattle;
                            float FirstDay = (float)objFirstInt.TotalDays;
                            hfFirstIntDay.Value = FirstDay.ToString();

                            TimeSpan objSecondInt = Maturity - IPDates;
                            float SecondDay = (float)objSecondInt.TotalDays;
                            hfSecondIntDay.Value = SecondDay.ToString();
                            float day = FirstDay + SecondDay;
                            hfDayValue.Value = day.ToString();

                            DateTime compareTo = IPDates;
                            DateTime now = Maturity;
                            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                            var TotalYear = dateSpan.Years;
                            hfTotalYear.Value = TotalYear.ToString();
                            var TotalMonth = dateSpan.Months;
                            hfTotalMonth.Value = TotalMonth.ToString();
                            var TotalDay = dateSpan.Days;
                            hfTotalDay.Value = TotalDay.ToString();
                        }
                    }
                    else
                    {
                        DataTable dt = dl.get_QuarterlyDate(Sattles, IPDat);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;


                            DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                            TimeSpan objFirstInt = IPDates - Sattle;
                            float FirstDay = (float)objFirstInt.TotalDays;
                            hfFirstIntDay.Value = FirstDay.ToString();

                            TimeSpan objSecondInt = Maturity - IPDates;
                            float SecondDay = (float)objSecondInt.TotalDays;
                            hfSecondIntDay.Value = SecondDay.ToString();
                            float day = FirstDay + SecondDay;
                            hfDayValue.Value = day.ToString();

                            DateTime compareTo = IPDates;
                            DateTime now = Maturity;
                            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                            var TotalYear = dateSpan.Years;
                            hfTotalYear.Value = TotalYear.ToString();
                            var TotalMonth = dateSpan.Months;
                            hfTotalMonth.Value = TotalMonth.ToString();
                            var TotalDay = dateSpan.Days;
                            hfTotalDay.Value = TotalDay.ToString();
                        }
                    }
                }
            }

            if (ddlPaymentType.Text == "Half Yearly")
            {
                if (IPDate > Sattle)
                {

                    TimeSpan objFirstInt = IPDate - Sattle;
                    float FirstDay = (float)objFirstInt.TotalDays;
                    hfFirstIntDay.Value = FirstDay.ToString();

                    TimeSpan objSecondInt = Maturity - IPDate;
                    float SecondDay = (float)objSecondInt.TotalDays;
                    hfSecondIntDay.Value = SecondDay.ToString();
                    float day = FirstDay + SecondDay;
                    hfDayValue.Value = day.ToString();

                    DateTime compareTo = IPDate;
                    DateTime now = Maturity;
                    var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                    var TotalYear = dateSpan.Years;
                    hfTotalYear.Value = TotalYear.ToString();
                    var TotalMonth = dateSpan.Months;
                    hfTotalMonth.Value = TotalMonth.ToString();
                    var TotalDay = dateSpan.Days;
                    hfTotalDay.Value = TotalDay.ToString();


                }
                else
                {

                    if (hfEOM.Value == "1")
                    {
                        DataTable dt = dl.get_LastHalfYearlyDate(Sattles, IPDat);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;


                            DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                            TimeSpan objFirstInt = IPDates - Sattle;
                            float FirstDay = (float)objFirstInt.TotalDays;
                            hfFirstIntDay.Value = FirstDay.ToString();

                            TimeSpan objSecondInt = Maturity - IPDates;
                            float SecondDay = (float)objSecondInt.TotalDays;
                            hfSecondIntDay.Value = SecondDay.ToString();
                            float day = FirstDay + SecondDay;
                            hfDayValue.Value = day.ToString();

                            DateTime compareTo = IPDates;
                            DateTime now = Maturity;
                            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                            var TotalYear = dateSpan.Years;
                            hfTotalYear.Value = TotalYear.ToString();
                            var TotalMonth = dateSpan.Months;
                            hfTotalMonth.Value = TotalMonth.ToString();
                            var TotalDay = dateSpan.Days;
                            hfTotalDay.Value = TotalDay.ToString();
                        }
                    }
                    else
                    {
                        DataTable dt = dl.get_HalfYearlyDate(Sattles, IPDat);
                        if (dt.Rows.Count > 0)
                        {
                            string Date = dt.Rows[0]["mth_start"].ToString();
                            hfQuar.Value = Date;


                            DateTime IPDates = DateTime.ParseExact(hfQuar.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                            hfIPDates.Value = IPDates.ToString("dd/MM/yyyy").Replace("-", "/");
                            TimeSpan objFirstInt = IPDates - Sattle;
                            float FirstDay = (float)objFirstInt.TotalDays;
                            hfFirstIntDay.Value = FirstDay.ToString();

                            TimeSpan objSecondInt = Maturity - IPDates;
                            float SecondDay = (float)objSecondInt.TotalDays;
                            hfSecondIntDay.Value = SecondDay.ToString();
                            float day = FirstDay + SecondDay;
                            hfDayValue.Value = day.ToString();

                            DateTime compareTo = IPDates;
                            DateTime now = Maturity;
                            var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                            var TotalYear = dateSpan.Years;
                            hfTotalYear.Value = TotalYear.ToString();
                            var TotalMonth = dateSpan.Months;
                            hfTotalMonth.Value = TotalMonth.ToString();
                            var TotalDay = dateSpan.Days;
                            hfTotalDay.Value = TotalDay.ToString();
                        }
                    }
                }
            }

            if (ddlPaymentType.Text == "One Time Interest")
            {



                //TimeSpan objFirstInt = IPDate - Sattle;
                //float FirstDay = (float)objFirstInt.TotalDays;
                //hfFirstIntDay.Value = FirstDay.ToString();

                TimeSpan objSecondInt = Maturity - IPDate;
                float SecondDay = (float)objSecondInt.TotalDays;
                hfSecondIntDay.Value = SecondDay.ToString();
                float day = SecondDay;
                hfDayValue.Value = day.ToString();

                DateTime compareTo = IPDate;
                DateTime now = Maturity;
                var dateSpan = DateTimeSpan.CompareDates(compareTo, now);
                var TotalYear = dateSpan.Years;
                hfTotalYear.Value = TotalYear.ToString();
                var TotalMonth = dateSpan.Months;
                hfTotalMonth.Value = TotalMonth.ToString();
                var TotalDay = dateSpan.Days;
                hfTotalDay.Value = TotalDay.ToString();




            }


            TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");
            TextBox txtFaceValueBond = (TextBox)item.FindControl("txtFaceValueBond");
            float facev = float.Parse(txtFaceValueBond.Text);
            float qty = float.Parse(txtQty.Text);
            txtFaceValueDeal.Text = (facev * qty).ToString("0.00");
            hfFacrValueForDeal.Value = txtFaceValueDeal.Text;
            PaymentType();
            TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            TextBox txtRate = (TextBox)item.FindControl("txtRate");
            TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            // TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            float Rate = float.Parse(txtRate.Text);
            float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            float FaceValue = float.Parse(txtFaceValueDeal.Text);
            float Coupon = float.Parse(txtCouponRate.Text);
            float coupon = float.Parse(txtCouponRate.Text);
            float Deal = float.Parse(hfFacrValueForDeal.Value);
            hfCouponRate.Value = txtCouponRate.Text;


            //if (hfMaturityType.Value == "Bullet")
            //{

            //    lblYield.Text = hfYieldValue.Value;
            //    //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");


            //    lblPrice.Text = Rate.ToString();
            //    hfRatePrice.Value = Rate.ToString("0.00");

            //    hfFacrValueForDeal.Value = FaceValue.ToString();
            //    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //    float Principle = float.Parse(txtPrincipalAmount.Text);
            //    hfCouponRate.Value = Coupon.ToString();
            //    int NDay = 0;
            //    try
            //    {
            //        NDay = int.Parse(hfDayValue.Value);
            //    }
            //    catch (Exception ex) { }
            //    float Numbers = NDay;
            //    txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            //    hfTotalAssuredInterest.Value = txtAccured.Text;
            //    float Accured = float.Parse(txtAccured.Text);
            //    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            //    hfGrossConsideration.Value = txtGrossConder.Text;
            //    float GrossCo = float.Parse(txtGrossConder.Text);
            //    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //    // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            //    hfQuantity.Value = txtQty.Text;
            //    float StampDuty = float.Parse(txtStampDuty.Text);
            //    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            //}

            //if (hfMaturityType.Value == "Cumulative")
            //{

            //    // TextBox txtCouponRate = (TextBox)item.FindControl("txtCouponRate");
            //    // TextBox txtRate = (TextBox)item.FindControl("txtRate");
            //    // TextBox txtPrincipalAmount = (TextBox)item.FindControl("txtPrincipalAmount");
            //    //// TextBox txtLastIP = (TextBox)item.FindControl("txtLastIP");
            //    // TextBox txtAccured = (TextBox)item.FindControl("txtAccured");
            //    // TextBox txtGrossConder = (TextBox)item.FindControl("txtGrossConder");
            //    // TextBox txtStampDuty = (TextBox)item.FindControl("txtStampDuty");
            //    // TextBox txtConsiderationStamp = (TextBox)item.FindControl("txtConsiderationStamp");
            //    // TextBox txtSattlementdate = (TextBox)item.FindControl("txtSattlementdate");
            //    //  TextBox txtFaceValueDeal = (TextBox)item.FindControl("txtFaceValueDeal");

            //    // float Rates = float.Parse(txtRate.Text);
            //    hfRatePrice.Value = Rate.ToString("0.00");
            //    //float FacevalueBond = float.Parse(txtFaceValueBond.Text);
            //    //float FaceValue = float.Parse(txtFaceValueDeal.Text);
            //    hfFacrValueForDeal.Value = FaceValue.ToString();
            //    txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //    hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //    float Principle = float.Parse(txtPrincipalAmount.Text);
            //    //float Coupon = float.Parse(txtCouponRate.Text);
            //    hfCouponRate.Value = Coupon.ToString();
            //    int NDay = 0;
            //    try
            //    {
            //        NDay = int.Parse(hfDayValue.Value);
            //    }
            //    catch (Exception ex) { }
            //    float Numbers = NDay;
            //    txtAccured.Text = Convert.ToDecimal(FaceValue * Coupon * NDay / 36500).ToString("0.00");
            //    hfTotalAssuredInterest.Value = txtAccured.Text;
            //    float Accured = float.Parse(txtAccured.Text);
            //    txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + (FaceValue * Coupon * NDay / 36500)).ToString("0.00");
            //    hfGrossConsideration.Value = txtGrossConder.Text;
            //    float GrossCo = float.Parse(txtGrossConder.Text);
            //    txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //    //  txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            //    hfQuantity.Value = txtQty.Text;
            //    float StampDuty = float.Parse(txtStampDuty.Text);
            //    txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //    float total = float.Parse(txtConsiderationStamp.Text);
            //    hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            //    float TotalGrossAmount = FaceValue + total;
            //    hfTotalGrossAmount.Value = TotalGrossAmount.ToString();
            //}

            //if (hfMaturityType.Value == "Staggered")
            //{

            //    lblYield.Text = hfYieldValue.Value;
            //    hfRatePrice.Value = Rate.ToString("0.00");
            //    hfFacrValueForDeal.Value = FaceValue.ToString();
            //    if (hfPaymentType.Value == "Monthly")
            //    {
            //        if (IPDate < Sattle)
            //        {
            //            DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

            //            TimeSpan FirstDay = (InstallDate - Salltle);
            //            DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
            //            if (dtc.Rows.Count > 0)
            //            {
            //                string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

            //                float percent = float.Parse(Percentage.ToString());

            //                float fday = (float)FirstDay.TotalDays;
            //                float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
            //                float Principal = (FaceValue * percent / 100);
            //                hfFirstMonthly.Value = FirstMonth.ToString();
            //                float face = (Deal - (FaceValue * percent / 100));
            //                hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                DateTime lastDate = InstallDate;
            //                float intfirst = ((Deal * coupon * fday) / 36500);
            //                hfIntFirst.Value = intfirst.ToString();
            //                float per = percent;
            //                hfPercentFirst.Value = per.ToString();
            //                int UnitCount = Convert.ToInt32(hfMonth.Value);
            //                float interest = 0;
            //                float Pers = 0;
            //                for (int i = 1; i < UnitCount + 1; i++)
            //                {

            //                    DateTime InsDate = InstallDate.AddMonths(i);
            //                    DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                    if (dtm.Rows.Count > 0)
            //                    {
            //                        //float fas = float.Parse(hfFaceee.Value);
            //                        string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                        if (Perc == null || Perc == "")
            //                        {
            //                        }
            //                        else
            //                        {
            //                            float perce = float.Parse(Perc);
            //                            TimeSpan objTimeSpan = InsDate - lastDate;
            //                            float days = (float)objTimeSpan.TotalDays;
            //                            float monthlyinterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                            float principal = ((FaceValue * perce / 100));
            //                            hfMonthlyInterest.Value = monthlyinterest.ToString();
            //                            lastDate = InsDate;
            //                            float Faces = (face - (FaceValue * perce / 100));
            //                            hfFaces.Value = Faces.ToString();
            //                            float total = (interest + ((face * coupon * days) / 36500));
            //                            face = Faces;
            //                            interest = total;
            //                            hfTotalInt.Value = interest.ToString();
            //                            float totalpercent = (Pers + perce);
            //                            Pers = totalpercent;
            //                            hfTotalPercent.Value = totalpercent.ToString();
            //                        }
            //                    }
            //                    else
            //                    {

            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float monthlyinterest = (((face * coupon * days) / 36500));
            //                        hfMonthlyInterest.Value = monthlyinterest.ToString();
            //                        lastDate = InsDate;
            //                        float total = (interest + (face * coupon * days) / 36500);
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();

            //                    }

            //                }

            //                DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //                float facelast = float.Parse(hfFaces.Value);
            //                float intLast = float.Parse(hfTotalInt.Value);
            //                float lastpercent = float.Parse(hfTotalPercent.Value);

            //                if (dtn.Rows.Count > 0)
            //                {

            //                    string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float Percs = float.Parse(Perc);
            //                        float Fulltotapercent = (per + lastpercent + Percs);
            //                        float remainingpercent = (100 - Fulltotapercent);
            //                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
            //                        float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                        float principal = (FaceValue * Percs / 100);
            //                        hfLastMonthly.Value = LastMonth.ToString();
            //                        float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
            //                        hfTotalFullInt.Value = LastInterest.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    float remainingpercent = (100 - lastpercent);
            //                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
            //                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
            //                    hfLastMonthly.Value = LastMonth.ToString();
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float fday = (float)FirstDay.TotalDays;
            //                float FirstMonth = ((Deal * coupon * fday) / 36500);
            //                hfFirstMonthly.Value = FirstMonth.ToString();
            //                DateTime lastDate = InstallDate;
            //                float intfirst = ((Deal * coupon * fday) / 36500);
            //                float interest = 0;
            //                float Pers = 0;
            //                int UnitCount = Convert.ToInt32(hfMonth.Value);
            //                for (int i = 1; i < UnitCount + 1; i++)
            //                {

            //                    DateTime InsDate = InstallDate.AddMonths(i);
            //                    DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                    if (dtm.Rows.Count > 0)
            //                    {
            //                        string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                        if (Perc == null || Perc == "")
            //                        {

            //                        }
            //                        else
            //                        {
            //                            float perce = float.Parse(Perc);

            //                            TimeSpan objTimeSpan = InsDate - lastDate;
            //                            float days = (float)objTimeSpan.TotalDays;
            //                            float monthlyinterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                            float principal = (FaceValue * perce / 100);
            //                            hfMonthlyInterest.Value = monthlyinterest.ToString();
            //                            lastDate = InsDate;
            //                            float Faces = (Deal - (FaceValue * perce / 100));
            //                            hfFaces.Value = Faces.ToString();
            //                            float total = (interest + ((Deal * coupon * days) / 36500));
            //                            Deal = Faces;
            //                            interest = total;
            //                            hfTotalInt.Value = interest.ToString();
            //                            float totalpercent = (Pers + perce);
            //                            Pers = totalpercent;
            //                            hfTotalPercent.Value = totalpercent.ToString();
            //                        }
            //                    }
            //                    else
            //                    {

            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float monthlyinterest = (((Deal * coupon * days) / 36500));
            //                        hfMonthlyInterest.Value = monthlyinterest.ToString();
            //                        lastDate = InsDate;
            //                        float total = (interest + (Deal * coupon * days) / 36500);
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                    }

            //                }

            //                DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //                float intLast = float.Parse(hfTotalInt.Value);
            //                float facelast = float.Parse(hfFaces.Value);
            //                float lastpercent = float.Parse(hfTotalPercent.Value);
            //                if (dtn.Rows.Count > 0)
            //                {
            //                    string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float Percs = float.Parse(Perc);
            //                        float Fulltotapercent = (lastpercent + Percs);
            //                        float remainingpercent = (100 - Fulltotapercent);
            //                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
            //                        float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                        float principal = (FaceValue * Percs / 100);
            //                        hfLastMonthly.Value = LastMonth.ToString();
            //                        float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
            //                        hfTotalFullInt.Value = LastInterest.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    float remainingpercent = (100 - lastpercent);
            //                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
            //                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
            //                    hfLastMonthly.Value = LastMonth.ToString();
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * LastMonthInt) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            // txt.Text = (FaceValue / FacevalueBond).ToString();
            //            hfQuantity.Value = txtQty.Text;
            //            txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //            hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //            txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
            //            float Accured = float.Parse(txtAccured.Text);
            //            hfTotalAssuredInterest.Value = txtAccured.Text;
            //            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
            //            float GrossCo = float.Parse(txtGrossConder.Text);
            //            hfGrossConsideration.Value = txtGrossConder.Text;
            //            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            //        }
            //    }

            //    if (hfPaymentType.Value == "Yearly")
            //    {
            //        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        TimeSpan FirstDay = (InstallDate - Salltle);
            //        float fday = (float)FirstDay.TotalDays;
            //        DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
            //        if (dt.Rows.Count > 0)
            //        {
            //            string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
            //            float Percent = float.Parse(Percentage);
            //            float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
            //            float Principal = (FaceValue * Percent / 100);
            //            hfFirstYearly.Value = FirstYear.ToString();
            //            DateTime lastDate = InstallDate;
            //            float face = (FaceValue - (FaceValue * Percent / 100));
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            hfIntFirst.Value = intfirst.ToString();
            //            float per = Percent;
            //            float Pers = 0;
            //            float interest = 0;
            //            int UnitCount = Convert.ToInt32(hfYearly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {

            //                DateTime InsDate = InstallDate.AddMonths(i * 12);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {

            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float yearlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        float principal = (FaceValue * perce / 100);
            //                        hfYearlyInterest.Value = yearlyInterest.ToString();
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (face - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((face * coupon * days) / 36500));
            //                        interest = total;
            //                        face = Faces;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }
            //                }
            //                else
            //                {

            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float yearlyInterest = (((face * coupon * days) / 36500));
            //                    hfYearlyInterest.Value = yearlyInterest.ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((face * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();
            //                }

            //            }

            //            //DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            float facelast = float.Parse(hfFaces.Value);
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            if (dtn.Rows.Count > 0)
            //            {

            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {

            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (per + lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                hfTotalFullInt.Value = LastInterest.ToString();

            //            }

            //        }
            //        else
            //        {

            //            float FirstYear = ((Deal * coupon * fday) / 36500);
            //            hfFirstYearly.Value = FirstYear.ToString();
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            DateTime lastDate = InstallDate;
            //            float interest = 0;
            //            float Pers = 0;
            //            int UnitCount = Convert.ToInt32(hfYearly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {
            //                DateTime InsDate = InstallDate.AddMonths(i * 12);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {
            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float yearlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        hfYearlyInterest.Value = yearlyInterest.ToString();
            //                        float principal = (FaceValue * perce / 100);
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (Deal - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((Deal * coupon * days) / 36500));
            //                        Deal = Faces;
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float yearlyInterest = (((Deal * coupon * days) / 36500));
            //                    hfYearlyInterest.Value = yearlyInterest.ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((Deal * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();

            //                }


            //            }
            //            // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            float facelast = float.Parse(hfFaces.Value);
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            if (dtn.Rows.Count > 0)
            //            {
            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }

            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                hfTotalFullInt.Value = LastInterest.ToString();

            //            }

            //        }
            //        // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            //        hfQuantity.Value = txtQty.Text;
            //        txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //        hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //        txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
            //        hfTotalAssuredInterest.Value = txtAccured.Text;
            //        float Accured = float.Parse(txtAccured.Text);
            //        txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
            //        hfGrossConsideration.Value = txtGrossConder.Text;
            //        float GrossCo = float.Parse(txtGrossConder.Text);
            //        txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //        txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //        hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            //    }

            //    if (hfPaymentType.Value == "Quarterly")
            //    {
            //        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        TimeSpan FirstDay = (InstallDate - Salltle);
            //        float fday = (float)FirstDay.TotalDays;
            //        DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
            //        if (dtc.Rows.Count > 0)
            //        {
            //            string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
            //            float percent = float.Parse(Percentage.ToString());
            //            float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
            //            hfFirstQuarterly.Value = FirstQuarterly.ToString();
            //            float Principal = (FaceValue * percent / 100);
            //            float face = (Deal - (FaceValue * percent / 100));
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            float interest = 0;
            //            float per = percent;
            //            float Pers = 0;
            //            DateTime lastDate = InstallDate;
            //            int UnitCount = Convert.ToInt32(hfQuerterly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {
            //                DateTime InsDate = InstallDate.AddMonths(i * 3);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {
            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float QuertarlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
            //                        float principal = (FaceValue * perce / 100);
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (face - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((face * coupon * days) / 36500));
            //                        face = Faces;
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float QuertarlyInterest = (((face * coupon * days) / 36500));
            //                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((face * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();
            //                }

            //            }
            //            //DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            float facelast = float.Parse(hfFaces.Value);
            //            if (dtn.Rows.Count > 0)
            //            {
            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {

            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (per + lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((facelast * coupon * dayss) / 36500));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                hfTotalFullInt.Value = LastInterest.ToString();
            //            }

            //        }
            //        else
            //        {
            //            float FirstQuarterly = ((Deal * coupon * fday) / 36500);
            //            hfFirstQuarterly.Value = FirstQuarterly.ToString();
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            DateTime lastDate = InstallDate;
            //            float interest = 0;
            //            float Pers = 0;
            //            int UnitCount = Convert.ToInt32(hfQuerterly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {
            //                DateTime InsDate = InstallDate.AddMonths(i * 3);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {
            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float QuertarlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
            //                        float principal = (FaceValue * perce / 100);
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (Deal - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((Deal * coupon * days) / 36500));
            //                        Deal = Faces;
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float QuertarlyInterest = (((Deal * coupon * days) / 36500));
            //                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((Deal * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();
            //                }

            //            }

            //            //  DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float facelast = float.Parse(hfFaces.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            if (dtn.Rows.Count > 0)
            //            {
            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((facelast * coupon * dayss) / 36500));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                hfTotalFullInt.Value = LastInterest.ToString();
            //            }
            //        }
            //        // txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            //        hfQuantity.Value = txtQty.Text;
            //        txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //        hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //        txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
            //        float Accured = float.Parse(txtAccured.Text);
            //        hfTotalAssuredInterest.Value = txtAccured.Text;
            //        txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
            //        float GrossCo = float.Parse(txtGrossConder.Text);
            //        hfGrossConsideration.Value = txtGrossConder.Text;
            //        txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //        txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //        hfTotalConserationAmount.Value = txtConsiderationStamp.Text;

            //    }

            //    if (hfPaymentType.Value == "Half Yearly")
            //    {
            //        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //        TimeSpan FirstDay = (InstallDate - Salltle);
            //        float fday = (float)FirstDay.TotalDays;
            //        DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
            //        if (dtc.Rows.Count > 0)
            //        {
            //            string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
            //            float percent = float.Parse(Percentage.ToString());
            //            float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
            //            hfFirstHalf.Value = FirstHalfY.ToString();
            //            float Principal = (FaceValue * percent / 100);
            //            DateTime lastDate = InstallDate;
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            float face = (Deal - (FaceValue * percent / 100));
            //            float per = percent;
            //            float Pers = 0;
            //            float interest = 0;
            //            int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {
            //                DateTime InsDate = InstallDate.AddMonths(i * 6);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {
            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float halfInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
            //                        float principal = (FaceValue * perce / 100);
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (face - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((face * coupon * days) / 36500));
            //                        face = Faces;
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }

            //                }
            //                else
            //                {
            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float halfInterest = (((face * coupon * days) / 36500));
            //                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((face * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();
            //                }

            //            }
            //            // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float facelast = float.Parse(hfFaces.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            if (dtn.Rows.Count > 0)
            //            {
            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {

            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (per + lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                hfTotalFullInt.Value = LastInterest.ToString();
            //            }

            //        }
            //        else
            //        {
            //            float FirstHalfY = ((Deal * coupon * fday) / 36500);
            //            hfFirstHalf.Value = FirstHalfY.ToString();
            //            DateTime lastDate = InstallDate;
            //            float intfirst = ((Deal * coupon * fday) / 36500);
            //            float interest = 0;
            //            float Pers = 0;
            //            int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
            //            for (int i = 1; i < UnitCount + 1; i++)
            //            {
            //                DateTime InsDate = InstallDate.AddMonths(i * 6);
            //                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
            //                if (dtm.Rows.Count > 0)
            //                {
            //                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
            //                    if (Perc == null || Perc == "")
            //                    {

            //                    }
            //                    else
            //                    {
            //                        float perce = float.Parse(Perc);
            //                        TimeSpan objTimeSpan = InsDate - lastDate;
            //                        float days = (float)objTimeSpan.TotalDays;
            //                        float halfInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
            //                        float principal = (FaceValue * perce / 100);
            //                        hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
            //                        lastDate = InsDate;
            //                        hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                        float Faces = (Deal - (FaceValue * perce / 100));
            //                        hfFaces.Value = Faces.ToString();
            //                        float total = (interest + ((Deal * coupon * days) / 36500));
            //                        Deal = Faces;
            //                        interest = total;
            //                        hfTotalInt.Value = interest.ToString();
            //                        float totalpercent = (Pers + perce);
            //                        Pers = totalpercent;
            //                        hfTotalPercent.Value = totalpercent.ToString();
            //                    }
            //                }
            //                else
            //                {
            //                    TimeSpan objTimeSpan = InsDate - lastDate;
            //                    float days = (float)objTimeSpan.TotalDays;
            //                    float halfInterest = (((Deal * coupon * days) / 36500));
            //                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
            //                    lastDate = InsDate;
            //                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
            //                    float total = (interest + ((Deal * coupon * days) / 36500));
            //                    interest = total;
            //                    hfTotalInt.Value = interest.ToString();
            //                }

            //            }
            //            // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            //            TimeSpan objtime = (Maturity - Last);
            //            float dayss = (float)objtime.TotalDays;
            //            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
            //            float intLast = float.Parse(hfTotalInt.Value);
            //            float facelast = float.Parse(hfFaces.Value);
            //            float lastpercent = float.Parse(hfTotalPercent.Value);
            //            if (dtn.Rows.Count > 0)
            //            {
            //                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
            //                if (Perc == null || Perc == "")
            //                {
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //                else
            //                {
            //                    float Percs = float.Parse(Perc);
            //                    float Fulltotapercent = (lastpercent + Percs);
            //                    float remainingpercent = (100 - Fulltotapercent);
            //                    float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
            //                    float principal = (FaceValue * Percs / 100);
            //                    float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                    hfTotalFullInt.Value = LastInterest.ToString();
            //                }
            //            }
            //            else
            //            {
            //                float remainingpercent = (100 - lastpercent);
            //                float LastYearly = (((Deal * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
            //                float LastInterest = (intfirst + intLast + ((facelast * coupon * dayss) / 36500));
            //                hfTotalFullInt.Value = LastInterest.ToString();
            //            }

            //        }
            //        //txtQuantity.Text = (FaceValue / FacevalueBond).ToString();
            //        hfQuantity.Value = txtQty.Text;
            //        txtPrincipalAmount.Text = Convert.ToDecimal(Rate * FaceValue / 100).ToString("0.00");
            //        hfPrincipalAmount.Value = txtPrincipalAmount.Text;
            //        txtAccured.Text = Convert.ToDecimal(hfTotalFullInt.Value).ToString("0.00");
            //        if (txtAccured.Text == null || txtAccured.Text == "")
            //        {

            //        }
            //        else
            //        {
            //            float Accured = float.Parse(txtAccured.Text);

            //            hfTotalAssuredInterest.Value = txtAccured.Text;
            //            txtGrossConder.Text = Convert.ToDecimal((Rate * FaceValue / 100) + Accured).ToString("0.00");
            //            float GrossCo = float.Parse(txtGrossConder.Text);
            //            hfGrossConsideration.Value = txtGrossConder.Text;
            //            txtStampDuty.Text = Convert.ToInt32(GrossCo * 0.0001 / 100).ToString();
            //            float stamp = float.Parse(txtStampDuty.Text);
            //            txtConsiderationStamp.Text = Convert.ToDecimal(GrossCo + (GrossCo * 0.0001 / 100)).ToString("0.00");
            //            hfTotalConserationAmount.Value = txtConsiderationStamp.Text;
            //        }
            //    }

            //}


            createPerticularsTable();
            createPerticularsTables();
            float de = float.Parse(hfFacrValueForDeal.Value);
            string facedeal = Convert.ToDecimal(de).ToString("0.00");
            int IIdd = dl.add_CashFlowViews(null, GetUserLoggedIn(), hfProductsId.Value, hfPaymentType.Value, hfSattlementDate.Value, hfIPDate.Value, facedeal, hfTotalConserationAmount.Value, hfQuantity.Value, hfPrincipalAmount.Value, hfTotalAssuredInterest.Value, hfGrossConsideration.Value, hfRatePrice.Value);
            int IId = dl.add_CashFlows(null, GetUserLoggedIn(), hfProductsId.Value, hfPaymentType.Value, hfFacrValueForDeal.Value);
            string deal = Convert.ToDecimal(Deal).ToString("0.00");

            pnlViewSheet.Visible = false;
            if (hfMaturityType.Value == "Bullet")
            {

                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = Sattle;
                        DateTime InstallDate = IPDate;
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday = (float)FirstDay.TotalDays;
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);

                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float monthlyinterest = (((Deal * coupon * days) / 36500));
                            hfMonthlyInterest.Value = monthlyinterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, days.ToString(), hfMonthlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                            lastDate = InsDate;
                        }

                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
                        float LastMonth = (((Deal * coupon * LastMonthInt) / 36500) + (Rate * FaceValue / 100));
                        hfLastMonthly.Value = LastMonth.ToString();
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, LastMonthInt.ToString(), hfLastMonthly.Value);
                        dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastMonth.ToString(), null);
                    }
                    else
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstMonth = ((Deal * coupon * fday) / 36500);
                        hfFirstMonthly.Value = FirstMonth.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfMonth.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float monthlyinterest = (((Deal * coupon * days) / 36500));
                            hfMonthlyInterest.Value = monthlyinterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, days.ToString(), hfMonthlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                            lastDate = InsDate;
                        }
                        float LastMonthInt = float.Parse(hfRemainingDay.Value);
                        float LastMonth = (((Deal * coupon * LastMonthInt) / 36500) + (Rate * FaceValue / 100));
                        hfLastMonthly.Value = LastMonth.ToString();
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, LastMonthInt.ToString(), hfLastMonthly.Value);
                        dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                    }

                }
                if (hfPaymentType.Value == "Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-12);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, days.ToString(), hfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        //DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        DateTime InsDatess = InstallDate.AddMonths(-12);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float yearlyInterest = (((Deal * coupon * days) / 36500));
                            hfYearlyInterest.Value = yearlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, days.ToString(), hfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        //DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                        if (hfLastDate.Value != "")
                        {
                            DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                            TimeSpan objtime = (Maturity - Last);
                            float dayss = (float)objtime.TotalDays;
                            float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                        }
                        else
                        {
                            DateTime Last = lastDate;
                            if (Maturity < Last)
                            {
                                TimeSpan objtime = (Maturity - Last);
                                float dayss = (float)objtime.TotalDays;
                                float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                            }
                            else
                            {
                                TimeSpan objtime = (Maturity - Last);
                                float dayss = (float)objtime.TotalDays;
                                float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                AddPerticularItem(Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, Maturity.ToString("dd/MM/yyyy").Replace("-", "/"), LastYearly.ToString(), null);
                            }

                        }

                    }


                }
                if (hfPaymentType.Value == "Quarterly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-3);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, days.ToString(), hfQuarterlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        //DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.ToString(), hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-3);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                            hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, days.ToString(), hfQuarterlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }


                }
                if (hfPaymentType.Value == "Half Yearly")
                {
                    if (IPDate > Sattle)
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-6);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, days.ToString(), hfHalfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                    }
                    else
                    {
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan FirstDay = (InstallDate - Salltle);
                        float fday = (float)FirstDay.TotalDays;
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        DateTime InsDatess = InstallDate.AddMonths(-6);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItem(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            TimeSpan objTimeSpan = InsDate - lastDate;
                            float days = (float)objTimeSpan.TotalDays;
                            float halfInterest = (((Deal * coupon * days) / 36500));
                            hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                            AddPerticularItem(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, days.ToString(), hfHalfYearlyInterest.Value);
                            dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                            lastDate = InsDate;
                            hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                        }
                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float LastYearly = (((Deal * coupon * dayss) / 36500) + (Rate * FaceValue / 100));
                        string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                        AddPerticularItem(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), dayss.ToString(), last.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, last.ToString(), null);
                    }

                }
                pnlInBullet.Visible = true;
                pnlStaggered.Visible = false;
                pnlcumu.Visible = false;
            }
            if (hfMaturityType.Value == "Staggered")
            {
                if (hfPaymentType.Value == "Monthly")
                {
                    if (IPDate < Sattle)
                    {
                        DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                        TimeSpan FirstDay = (InstallDate - Salltle);
                        DateTime InsDatess = InstallDate.AddMonths(-1);
                        TimeSpan firstdat365 = (InstallDate - InsDatess);
                        DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                        if (dtc.Rows.Count > 0)
                        {
                            string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();

                            float percent = float.Parse(Percentage.ToString());

                            float fday = (float)FirstDay.TotalDays;
                            float FirstMonth = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                            float Principal = (FaceValue * percent / 100);
                            hfFirstMonthly.Value = FirstMonth.ToString();


                            float fday365 = (float)firstdat365.TotalDays;
                            float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);

                            string dd = Convert.ToDecimal(Deal).ToString("0.00");
                            AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                            float face = (Deal - (FaceValue * percent / 100));
                            hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            DateTime lastDate = InstallDate;
                            float per = percent;
                            float Pers = 0;
                            int UnitCount = Convert.ToInt32(hfMonth.Value);
                            for (int i = 1; i < UnitCount + 1; i++)
                            {
                                DateTime InsDate = InstallDate.AddMonths(i);
                                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                                if (dtm.Rows.Count > 0)
                                {
                                    //float fas = float.Parse(hfFaceee.Value);
                                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                    if (Perc == null || Perc == "")
                                    {

                                    }
                                    else
                                    {
                                        float perce = float.Parse(Perc);
                                        TimeSpan objTimeSpan = InsDate - lastDate;
                                        float days = (float)objTimeSpan.TotalDays;
                                        float monthlyinterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                        float principal = ((FaceValue * perce / 100));
                                        hfMonthlyInterest.Value = monthlyinterest.ToString();
                                        string ddd = Convert.ToDecimal(face).ToString("0.00");
                                        AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                        dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                        lastDate = InsDate;
                                        float Faces = (face - (FaceValue * perce / 100));
                                        hfFaces.Value = Faces.ToString();
                                        face = Faces;
                                        float totalpercent = (Pers + perce);
                                        Pers = totalpercent;
                                        hfTotalPercent.Value = totalpercent.ToString();
                                    }
                                }
                                else
                                {

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((face * coupon * days) / 36500));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                    lastDate = InsDate;
                                }

                            }

                            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                            float facelast = float.Parse(hfFaces.Value);
                            float lastpercent = float.Parse(hfTotalPercent.Value);
                            if (dtn.Rows.Count > 0)
                            {
                                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float Percs = float.Parse(Perc);
                                    float Fulltotapercent = (per + lastpercent + Percs);
                                    float remainingpercent = (100 - Fulltotapercent);
                                    float totalper = (Percs + remainingpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100) + (FaceValue * remainingpercent / 100));
                                    float principal = (FaceValue * Percs / 100);
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    string dddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), totalper.ToString(), dddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                            }
                            else
                            {
                                float remainingpercent = (100 - (per + lastpercent));
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * remainingpercent / 100));
                                hfLastMonthly.Value = LastMonth.ToString();
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                            }


                        }
                        else
                        {
                            float fday = (float)FirstDay.TotalDays;
                            float FirstMonth = ((Deal * coupon * fday) / 36500);
                            hfFirstMonthly.Value = FirstMonth.ToString();
                            float fday365 = (float)firstdat365.TotalDays;
                            float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                            string dd = Convert.ToDecimal(Deal).ToString("0.00");
                            AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstMonthly.Value, null, null, dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstMonthly.Value, null);
                            hfLastDates.Value = InstallDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            DateTime lastDate = InstallDate;
                            float Pers = 0;
                            int UnitCount = Convert.ToInt32(hfMonth.Value);
                            for (int i = 1; i < UnitCount + 1; i++)
                            {

                                DateTime InsDate = InstallDate.AddMonths(i);
                                DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                                if (dtm.Rows.Count > 0)
                                {
                                    string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                    if (Perc == null || Perc == "")
                                    {

                                    }
                                    else
                                    {
                                        float perce = float.Parse(Perc);
                                        TimeSpan objTimeSpan = InsDate - lastDate;
                                        float days = (float)objTimeSpan.TotalDays;
                                        float monthlyinterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                        float principal = (FaceValue * perce / 100);
                                        hfMonthlyInterest.Value = monthlyinterest.ToString();

                                        string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                        AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                        dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                        lastDate = InsDate;
                                        float Faces = (Deal - (FaceValue * perce / 100));
                                        hfFaces.Value = Faces.ToString();
                                        Deal = Faces;
                                        float totalpercent = (Pers + perce);
                                        Pers = totalpercent;
                                        hfTotalPercent.Value = totalpercent.ToString();
                                    }
                                }
                                else
                                {
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float monthlyinterest = (((Deal * coupon * days) / 36500));
                                    hfMonthlyInterest.Value = monthlyinterest.ToString();
                                    string dddd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfMonthlyInterest.Value, null, null, dddd.ToString(), days.ToString(), hfMonthlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfMonthlyInterest.Value, null);
                                    lastDate = InsDate;


                                }

                            }

                            DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                            float facelast = float.Parse(hfFaces.Value);
                            float lastpercent = float.Parse(hfTotalPercent.Value);
                            if (dtn.Rows.Count > 0)
                            {
                                string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {
                                    float remainingpercent = (100 - lastpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (facelast));
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    float principal = (FaceValue * remainingpercent / 100);
                                    string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                                else
                                {
                                    float Percs = float.Parse(Perc);
                                    float Fulltotalpercent = (lastpercent + Percs);
                                    float remainingpercent = (100 - Fulltotalpercent);
                                    float totalremainper = (Percs + remainingpercent);
                                    float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                    float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                    float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                    hfLastMonthly.Value = LastMonth.ToString();
                                    string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                    AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), totalremainper.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                                }
                            }
                            else
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastMonthInt = float.Parse(hfRemainingDay.Value);
                                float LastMonth = (((facelast * coupon * LastMonthInt) / 36500) + (facelast));
                                hfLastMonthly.Value = LastMonth.ToString();
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, hfLastMonthly.Value, principal.ToString(), remainingpercent.ToString(), ddd.ToString(), LastMonthInt.ToString(), hfLastMonthly.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), LastMonthInt.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, hfLastMonthly.Value, null);
                            }
                        }

                    }
                }

                if (hfPaymentType.Value == "Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-12);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);

                    DataTable dt = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dt.Rows.Count > 0)
                    {
                        string Percentage = dt.Rows[0]["MaturityTypePercentage"].ToString();
                        float Percent = float.Parse(Percentage);
                        float FirstYear = (((Deal * coupon * fday) / 36500) + (FaceValue * Percent / 100));
                        float Principal = (FaceValue * Percent / 100);
                        hfFirstYearly.Value = FirstYear.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * Percent / 100);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, Principal.ToString(), Percent.ToString(), dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;

                        float face = (FaceValue - (FaceValue * Percent / 100));
                        float per = Percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {

                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {

                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);

                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float yearlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfYearlyInterest.Value = yearlyInterest.ToString();
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((face * coupon * days) / 36500));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                string ddd = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }

                        //  DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remainingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {

                        float FirstYear = ((Deal * coupon * fday) / 36500);
                        hfFirstYearly.Value = FirstYear.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstYearly.Value, null, null, dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstYearly.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 12);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float yearlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfYearlyInterest.Value = yearlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float yearlyInterest = (((Deal * coupon * days) / 36500));
                                hfYearlyInterest.Value = yearlyInterest.ToString();
                                string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfYearlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }


                        }
                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                                float principal = (FaceValue * remainingpercent / 100);
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), LastYearly.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remaingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remaingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remaingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remaingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }

                }

                if (hfPaymentType.Value == "Quarterly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-3);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstQuarterly = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float Principal = (FaceValue * percent / 100);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);
                        string dd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        float face = (Deal - (FaceValue * percent / 100));
                        DateTime lastDate = InstallDate;
                        float per = percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float QuertarlyInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string ddd = Convert.ToDecimal(face).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, principal.ToString(), perce.ToString(), ddd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((face * coupon * days) / 36500));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                string ddd = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, null, null, ddd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        //  DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float totalper = (Percs + remainingpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string ddd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), ddd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {
                        float FirstQuarterly = ((Deal * coupon * fday) / 36500);
                        hfFirstQuarterly.Value = FirstQuarterly.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        string ddd = Convert.ToDecimal(Deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstQuarterly.Value, null, null, ddd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstQuarterly.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfQuerterly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 3);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float QuertarlyInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string dd = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, principal.ToString(), perce.ToString(), dd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float QuertarlyInterest = (((Deal * coupon * days) / 36500));
                                hfQuarterlyInterest.Value = QuertarlyInterest.ToString();
                                string dd = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfQuarterlyInterest.Value, null, null, dd.ToString(), days.ToString(), hfQuarterlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfQuarterlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }

                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = (FaceValue * remainingpercent / 100);
                                string dd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float totalper = (Percs + remainingpercent);
                                string dd = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string dd = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), dd.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }
                    }

                }

                if (hfPaymentType.Value == "Half Yearly")
                {
                    DateTime InstallDate = DateTime.ParseExact(hfIPDates.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime Salltle = DateTime.ParseExact(hfSattlementDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    TimeSpan FirstDay = (InstallDate - Salltle);
                    float fday = (float)FirstDay.TotalDays;
                    DateTime InsDatess = InstallDate.AddMonths(-6);
                    TimeSpan firstdat365 = (InstallDate - InsDatess);
                    DataTable dtc = dl.CheckMaturityTypeValue(hfProductsId.Value, hfIPDates.Value);
                    if (dtc.Rows.Count > 0)
                    {
                        string Percentage = dtc.Rows[0]["MaturityTypePercentage"].ToString();
                        float percent = float.Parse(Percentage.ToString());
                        float FirstHalfY = (((Deal * coupon * fday) / 36500) + (FaceValue * percent / 100));
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        float Principal = (FaceValue * percent / 100);
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500) + (FaceValue * percent / 100);
                        string dd = Convert.ToDecimal(deal).ToString("0.00");
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, Principal.ToString(), percent.ToString(), dd.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        float face = (Deal - (FaceValue * percent / 100));
                        float per = percent;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {

                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float halfInterest = (((face * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                    float principal = (FaceValue * perce / 100);
                                    string fa = Convert.ToDecimal(face).ToString("0.00");

                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, principal.ToString(), perce.ToString(), fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (face - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    face = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((face * coupon * days) / 36500));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                string fa = Convert.ToDecimal(face).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, null, null, fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        //  DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {

                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (per + lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float totalper = (Percs + remainingpercent);
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - (per + lastpercent));
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * remainingpercent / 100));
                            float principal = (FaceValue * remainingpercent / 100);
                            string fa = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, LastYearly.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), LastYearly.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }
                    else
                    {
                        float FirstHalfY = ((Deal * coupon * fday) / 36500);
                        hfFirstHalf.Value = FirstHalfY.ToString();
                        float fday365 = (float)firstdat365.TotalDays;
                        float FirstMonth365 = ((Deal * coupon * fday365) / 36500);
                        AddPerticularItems(InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfFirstHalf.Value, null, null, deal.ToString(), fday365.ToString(), FirstMonth365.ToString());
                        dl.add_CashFlowViewDetails(null, IId.ToString(), fday.ToString(), GetUserLoggedIn(), hfProductsId.Value, InstallDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfFirstHalf.Value, null);
                        DateTime lastDate = InstallDate;
                        float Pers = 0;
                        int UnitCount = Convert.ToInt32(hfHalfYearly.Value);
                        for (int i = 1; i < UnitCount + 1; i++)
                        {
                            DateTime InsDate = InstallDate.AddMonths(i * 6);
                            DataTable dtm = dl.CheckMaturityTypeValue(hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"));
                            if (dtm.Rows.Count > 0)
                            {
                                string Perc = dtm.Rows[0]["MaturityTypePercentage"].ToString();
                                if (Perc == null || Perc == "")
                                {

                                }
                                else
                                {
                                    float perce = float.Parse(Perc);
                                    TimeSpan objTimeSpan = InsDate - lastDate;
                                    float days = (float)objTimeSpan.TotalDays;
                                    float halfInterest = (((Deal * coupon * days) / 36500) + (FaceValue * perce / 100));
                                    float principal = (FaceValue * perce / 100);
                                    hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                    string fa = Convert.ToDecimal(Deal).ToString("0.00");
                                    AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, principal.ToString(), perce.ToString(), fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                    dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                    lastDate = InsDate;
                                    hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                                    float Faces = (Deal - (FaceValue * perce / 100));
                                    hfFaces.Value = Faces.ToString();
                                    Deal = Faces;
                                    float totalpercent = (Pers + perce);
                                    Pers = totalpercent;
                                    hfTotalPercent.Value = totalpercent.ToString();
                                }
                            }
                            else
                            {
                                TimeSpan objTimeSpan = InsDate - lastDate;
                                float days = (float)objTimeSpan.TotalDays;
                                float halfInterest = (((Deal * coupon * days) / 36500));
                                hfHalfYearlyInterest.Value = Convert.ToDecimal(halfInterest).ToString();
                                string fa = Convert.ToDecimal(Deal).ToString("0.00");
                                AddPerticularItems(InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfCouponRate.Value, hfHalfYearlyInterest.Value, null, null, fa.ToString(), days.ToString(), hfHalfYearlyInterest.Value);
                                dl.add_CashFlowViewDetails(null, IId.ToString(), days.ToString(), GetUserLoggedIn(), hfProductsId.Value, InsDate.ToString("dd/MM/yyyy").Replace("-", "/"), hfHalfYearlyInterest.Value, null);
                                lastDate = InsDate;
                                hfLastDate.Value = lastDate.ToString("dd/MM/yyyy").Replace("-", "/");
                            }

                        }
                        // DateTime Maturity = DateTime.ParseExact(hfMaturityDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        DateTime Last = DateTime.ParseExact(hfLastDate.Value, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        TimeSpan objtime = (Maturity - Last);
                        float dayss = (float)objtime.TotalDays;
                        float lastpercent = float.Parse(hfTotalPercent.Value);
                        DataTable dtn = dl.CheckMaturityTypeValue(hfProductsId.Value, hfMaturityDate.Value);
                        float facelast = float.Parse(hfFaces.Value);
                        if (dtn.Rows.Count > 0)
                        {
                            string Perc = dtn.Rows[0]["MaturityTypePercentage"].ToString();
                            if (Perc == null || Perc == "")
                            {
                                float remainingpercent = (100 - lastpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + facelast);
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = (FaceValue * remainingpercent / 100);
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                            else
                            {
                                float Percs = float.Parse(Perc);
                                float Fulltotalpercent = (lastpercent + Percs);
                                float remainingpercent = (100 - Fulltotalpercent);
                                float LastYearly = (((facelast * coupon * dayss) / 36500) + (FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                                float principal = ((FaceValue * Percs / 100) + (FaceValue * remainingpercent / 100));
                                float totalper = (Percs + remainingpercent);
                                string fa = Convert.ToDecimal(facelast).ToString("0.00");
                                AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), totalper.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                                dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                            }
                        }
                        else
                        {
                            float remainingpercent = (100 - lastpercent);
                            float LastYearly = (((facelast * coupon * dayss) / 36500) + (facelast));
                            string last = Convert.ToDecimal(LastYearly).ToString("0.00");
                            float principal = (FaceValue * remainingpercent / 100);
                            string fa = Convert.ToDecimal(facelast).ToString("0.00");
                            AddPerticularItems(hfMaturityDate.Value, hfCouponRate.Value, last.ToString(), principal.ToString(), remainingpercent.ToString(), fa.ToString(), dayss.ToString(), last.ToString());
                            dl.add_CashFlowViewDetails(null, IId.ToString(), dayss.ToString(), GetUserLoggedIn(), hfProductsId.Value, hfMaturityDate.Value, LastYearly.ToString(), null);
                        }

                    }

                }

                pnlInBullet.Visible = false;
                pnlStaggered.Visible = true;
                pnlcumu.Visible = false;
            }
            if (hfMaturityType.Value == "Cumulative")
            {
                pnlDetailsCumulative.Visible = true;
                lblInterestDate.Text = hfMaturityDate.Value;
                lblDays.Text = hfDayValue.Value;
                lblInterest.Text = Convert.ToString(string.Format("{0:0.00}", hfTotalGrossAmount.Value));
                lblCoupon.Text = hfCouponRate.Value;
                pnlInBullet.Visible = false;
                pnlStaggered.Visible = false;
                pnlcumu.Visible = true;
            }

            //BindInterestView();
            //DataTable dtg = dl.get_CashFlowView(IIdd.ToString(), GetUserLoggedIn(), null, true);
            //if (dtg.Rows.Count > 0)
            //{
            //    string ProductName = dtg.Rows[0]["Security"].ToString();
            //    string cEmail = dtg.Rows[0]["CEmail"].ToString();
            //    string CFullName = dtg.Rows[0]["CFullName"].ToString();
            //    string fDeal = dtg.Rows[0]["FaceValueForDeal"].ToString();
            //    string MaturityDate = dtg.Rows[0]["MaturityDate"].ToString();
            //    string IPDates = dtg.Rows[0]["LastIpdate"].ToString();
            //    string sdate = dtg.Rows[0]["SattlementDate"].ToString();
            //    string rmemail = dtg.Rows[0]["RMEmail"].ToString();
            //    string EntryDate = dtg.Rows[0]["EntryDate"].ToString();
            //    // sms.sendBondinterestforRM(ProductName, cEmail, CFullName, fDeal, MaturityDate, IPDates, sdate, rmemail, EntryDate);
            //}

        }

        ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "popc", "ClosePopup();", true);
        ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Inerest Sheet Generated Plz Scroll', type: 'success',});", true);
        
        pnlViewInterestSheet.Visible = true;

    }

    protected void lnkConfirmDeal_Click(object sender, EventArgs e)
    {
        DataTable dt = dl.get_DealConfirmation(hfDealConfirmationId.Value, null, GetUserLoggedIn(), null);
        if (dt.Rows.Count > 0)
        {
            string RMEmail = dt.Rows[0]["RMEmail"].ToString();
            string Email = dt.Rows[0]["CEmail"].ToString();
            string Mobile = dt.Rows[0]["CMobile"].ToString();
            string CName = dt.Rows[0]["CFullName"].ToString();
            string dealdate = dt.Rows[0]["DDealDate"].ToString();
            string sattledate = dt.Rows[0]["DSattlementDate"].ToString();
            string security = dt.Rows[0]["Security"].ToString();
            string isin = dt.Rows[0]["ISINNumber"].ToString();
            string couponrate = dt.Rows[0]["CouponRate"].ToString();
            string ipdate = dt.Rows[0]["IPDate"].ToString();
            string maturitytype = dt.Rows[0]["MaturityType"].ToString();
            string maturitydate = dt.Rows[0]["MaturityDate"].ToString();
            string putdate = dt.Rows[0]["PutCallDate"].ToString();
            string calldate = dt.Rows[0]["CallDate"].ToString();
            string lastipdate = dt.Rows[0]["DLastIPDate"].ToString();
            string noofdays = dt.Rows[0]["DNoOfDays"].ToString();
            string facevaluebond = dt.Rows[0]["FaceValueForBond"].ToString();
            string qty = dt.Rows[0]["DQuantity"].ToString();
            string rate = dt.Rows[0]["DRate"].ToString();
            string ytm = dt.Rows[0]["YTM"].ToString();
            string deal = dt.Rows[0]["DDealValue"].ToString();
            string principalamo = dt.Rows[0]["DPrincipalAmount"].ToString();
            string accuredinterest = dt.Rows[0]["DAccuredInterest"].ToString();
            string stampduty = dt.Rows[0]["DStampDuty"].ToString();
            string totalconsiderationstamp = dt.Rows[0]["DConsiderationStamp"].ToString();
            string consideration = dt.Rows[0]["DGrossConsideration"].ToString();

            sms.senddealconfirmation(
                RMEmail, Email, Mobile, CName, dealdate, sattledate, security, isin, couponrate,
                ipdate, maturitytype, maturitydate, putdate, calldate, lastipdate, noofdays,
                facevaluebond, qty, rate, ytm, deal, principalamo, accuredinterest,
                consideration, stampduty, totalconsiderationstamp
            );
        }

        ScriptManager.RegisterStartupScript(this, GetType(), "Popup", "$.notice({icon: 'info', text: 'Your Deal is Confirmed RM will Contact You as per your trade.', type: 'success',});", true);

        // Add redirection to UCCManagement.aspx
        Response.Redirect("~/BSE_INTEGRATION/admin/UCCManagement.aspx", false); // false to allow script to render
        Context.ApplicationInstance.CompleteRequest(); // ensures no further processing

        return;
    }


    protected void rptstag_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        {
            foreach (RepeaterItem rpt in rptstag.Items)
            {
                HiddenField hfPrincipal = rpt.FindControl("hfPrincipal") as HiddenField;
                Label Label1 = rpt.FindControl("Label1") as Label;
                Label Label2 = rpt.FindControl("Label2") as Label;
                Panel pnlHide = rpt.FindControl("pnlHide") as Panel;
                if (hfPrincipal.Value != "")
                {
                    pnlHide.Visible = true;
                }
                if (hfPrincipal.Value == "")
                {
                    pnlHide.Visible = false;
                }
            }

        }
    }
}